{"meta":{"title":"风铃扬音","subtitle":"","description":"","author":"magic","url":"https://zilinshisi.github.io","root":"/"},"pages":[{"title":"about","date":"2022-02-09T02:53:39.000Z","updated":"2023-02-09T02:54:54.290Z","comments":true,"path":"about/index.html","permalink":"https://zilinshisi.github.io/about/index.html","excerpt":"","text":""},{"title":"书单","date":"2023-02-09T02:59:04.682Z","updated":"2023-02-09T02:59:04.682Z","comments":false,"path":"books/index.html","permalink":"https://zilinshisi.github.io/books/index.html","excerpt":"","text":""},{"title":"categories","date":"2022-02-09T02:53:47.000Z","updated":"2023-02-09T02:54:56.366Z","comments":true,"path":"categories/index.html","permalink":"https://zilinshisi.github.io/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2023-02-09T02:59:04.682Z","updated":"2023-02-09T02:59:04.682Z","comments":true,"path":"links/index.html","permalink":"https://zilinshisi.github.io/links/index.html","excerpt":"","text":""},{"title":"tags","date":"2022-02-09T02:53:17.000Z","updated":"2023-02-09T02:54:58.724Z","comments":true,"path":"tags/index.html","permalink":"https://zilinshisi.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"web安全攻防常见端口说明和攻击汇总","slug":"web安全攻防常见端口说明和攻击汇总","date":"2023-02-09T01:32:54.000Z","updated":"2023-02-09T01:34:02.454Z","comments":true,"path":"posts/1052752514.html","link":"","permalink":"https://zilinshisi.github.io/posts/1052752514.html","excerpt":"","text":"文件共享服务端口 端口号 端口说明 攻击方向 21、22、69 Ftp/Tftp文件传输协议 允许匿名的上传、下载、爆破和嗅探 2049 Nfs服务 配置不当 139 Samba服务 爆破、未授权访问、远程代码执行 389 Ldap目录访问协议 注入、允许匿名访问、弱口令 远程连接服务端口 端口号 端口说明 攻击方向 22 SSH远程连接 爆破、SSH隧道及内网代理转发、文件传输 23 Telnet远程连接 爆破、嗅探、弱口令 3389 Rdp远程桌面链接 Shitf后门（Window Server 2003以下系统）、爆破 5900 VNC 弱口令爆破 5623 PyAnywhere服务 抓密码、代码执行 Web应用服务端口 端口号 端口说明 攻击方向 80/443/8080 常见的Web服务端口 Web攻击、爆破、对应服务器版本漏洞 7001/7002 WebLogic控制台 Java反序列化、弱口令 8080/8089 Jboss/Resin/Jetty/Jenkins 反序列化、控制器弱口令 9090 WebSphere控制台 Java反序列化、弱口令 4848 GlassFish控制台 弱口令 1352 Lotus domino邮件服务 弱口令、信息泄露、爆破 10000 Webmin-Web控制面板 弱口令 数据库服务端口 端口号 端口说明 攻击方向 3306 Mysql数据库 注入、提权、爆破 1433 Mysql数据库 注入、提权、SA弱口令、爆破 1521 Oracle数据库 TNS爆破、注入、反弹Shell 5432 PostgreSQL数据库 爆破、注入、弱口令 27017/27018 MongoDB 爆破、未授权访问 6379 Redis数据库 尝试未授权访问、弱口令爆破 5000 SysBase/DB2数据库 爆破、注入 邮件服务端口 端口号 端口说明 攻击方向 25 SMTP邮件服务 邮件伪造 110 POP3协议 爆破、嗅探 143 IMAP协议 爆破 网络参加协议端口 端口号 端口说明 攻击方向 53 DNS域名服务器 允许区域传送、DNS劫持、缓存投毒、欺骗 67/68 DHCP服务 劫持、欺骗 161 SNMP协议 爆破、搜索目标内网信息 特殊服务端口 端口号 端口说明 攻击方向 2181 Zookeeper服务 未授权访问 8069 Zavvux服务 远程代码执行、SQL注入 9200 9300 Elasticsearch服务 11211 Memcache服务 未授权访问 512/513/514 Linux Rexec服务 匿名访问、文件上传 3690 Svn服务 Svn泄露、未授权访问 50000 SAP Management Console 远程代码执行","categories":[],"tags":[{"name":"web","slug":"web","permalink":"https://zilinshisi.github.io/tags/web/"}]},{"title":"【随笔】如何将python的pip镜像源改到国内","slug":"【随笔】如何将python的pip镜像源改到国内","date":"2023-01-07T06:28:18.000Z","updated":"2023-01-10T07:00:54.875Z","comments":true,"path":"posts/1677450529.html","link":"","permalink":"https://zilinshisi.github.io/posts/1677450529.html","excerpt":"","text":"一般安装python之后，pip默认的镜像地址是：https://pypi.org/simple 但是由于默认的官方pypi经常被墙，或者连接速度较慢，导致pip安装经常不可用或者下载安装包失败，所以我们最好是将自己使用的pip源更换一下，使用境内的pip镜像安装源。 国内镜像源清华大学：https://pypi.tuna.tsinghua.edu.cn/simple 清华大学的pip源是官网pypi的镜像，每隔5分钟同步一次，重点推荐！！！阿里云：http://mirrors.aliyun.com/pypi/simple/中国科技大学 https://pypi.mirrors.ustc.edu.cn/simple/豆瓣：http://pypi.douban.com/simple/ 临时使用镜像地址在使用pip的时候加上参数 -i 镜像源网址 举一个例子， 1pip install opencv-python -i https://pypi.tuna.tsinghua.edu.cn/simple/ 这样就可以从清华的镜像下载安装opencv-python。 注意，simple 不能少, 是 https 而不是 http 二、永久修改pip镜像(推荐)Windows系统①命令行修改使用pip命令全局配置pip镜像源 1pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple 升级 pip 到最新的版本 (&gt;=10.0.0) 后进行配置： 12python -m pip install --upgrade pippip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple 如果 pip 默认源的网络连接较差，临时使用本镜像站来升级 pip： 1python -m pip install -i https://pypi.tuna.tsinghua.edu.cn/simple --upgrade pip ②修改配置文件1.在C:/Users/用户名/AppData/Roaming 下新建pip文件夹，在文件夹中新建文件pip.ini 2以记事本的方式打开,输入下面内容，并保存 [global]index-url = https://pypi.tuna.tsinghua.edu.cn/simple [install]trusted-host = https://pypi.tuna.tsinghua.edu.cn 3.此时重新进入cmd，直接“pip install xxx”，可以看到此处还是清华大学的镜像源 Linux or Mac系统 使用软件包的安装用户，执行如下命令： 1234cd ~/.pip# 如果提示目录不存在，则执行如下命令创建：mkdir ~/.pipcd ~/.pip 编辑pip.conf文件。使用vi pip.conf命令打开pip.conf文件，写入如下内容： 12345[global]#以华为源为例，请根据实际情况进行替换。index-url = https://mirrors.huaweicloud.com/repository/pypi/simpletrusted-host = mirrors.huaweicloud.comtimeout = 120 执行**:wq!**命令保存文件。","categories":[{"name":"问题记录","slug":"问题记录","permalink":"https://zilinshisi.github.io/categories/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"python","slug":"python","permalink":"https://zilinshisi.github.io/tags/python/"},{"name":"pip","slug":"pip","permalink":"https://zilinshisi.github.io/tags/pip/"}]},{"title":"【随笔】pip升级报错","slug":"【随笔】pip升级报错","date":"2023-01-07T02:28:18.000Z","updated":"2023-01-10T07:00:54.871Z","comments":true,"path":"posts/3721209494.html","link":"","permalink":"https://zilinshisi.github.io/posts/3721209494.html","excerpt":"","text":"pip升级报错解决办法1、报错信息1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556Microsoft Windows [版本 10.0.19044.2364](c) Microsoft Corporation。保留所有权利。C:\\Users\\LIN&gt;python.exe -m pip install --upgrade pipLooking in indexes: https://pypi.tuna.tsinghua.edu.cn/simpleRequirement already satisfied: pip in c:\\users\\lin\\appdata\\roaming\\python\\python39\\site-packages (22.2.2)Collecting pip Using cached https://pypi.tuna.tsinghua.edu.cn/packages/09/bd/2410905c76ee14c62baf69e3f4aa780226c1bbfc9485731ad018e35b0cb5/pip-22.3.1-py3-none-any.whl (2.1 MB)Installing collected packages: pip Attempting uninstall: pip Found existing installation: pip 22.2.2 Uninstalling pip-22.2.2: Successfully uninstalled pip-22.2.2 Rolling back uninstall of pip Moving to c:\\users\\lin\\appdata\\roaming\\python\\python39\\scripts\\pip.exe from C:\\Users\\LIN\\AppData\\Local\\Temp\\pip-uninstall-7ambfccl\\pip.exe Moving to c:\\users\\lin\\appdata\\roaming\\python\\python39\\scripts\\pip3.9.exe from C:\\Users\\LIN\\AppData\\Local\\Temp\\pip-uninstall-7ambfccl\\pip3.9.exe Moving to c:\\users\\lin\\appdata\\roaming\\python\\python39\\scripts\\pip3.exe from C:\\Users\\LIN\\AppData\\Local\\Temp\\pip-uninstall-7ambfccl\\pip3.exe Moving to c:\\users\\lin\\appdata\\roaming\\python\\python39\\site-packages\\pip-22.2.2.dist-info\\ from C:\\Users\\LIN\\AppData\\Roaming\\Python\\Python39\\site-packages\\~ip-22.2.2.dist-info Moving to c:\\users\\lin\\appdata\\roaming\\python\\python39\\site-packages\\pip\\ from C:\\Users\\LIN\\AppData\\Roaming\\Python\\Python39\\site-packages\\~ipERROR: Exception:Traceback (most recent call last): File &quot;C:\\Users\\LIN\\AppData\\Roaming\\Python\\Python39\\site-packages\\pip\\_internal\\cli\\base_command.py&quot;, line 167, in exc_logging_wrapper status = run_func(*args) File &quot;C:\\Users\\LIN\\AppData\\Roaming\\Python\\Python39\\site-packages\\pip\\_internal\\cli\\req_command.py&quot;, line 247, in wrapper return func(self, options, args) File &quot;C:\\Users\\LIN\\AppData\\Roaming\\Python\\Python39\\site-packages\\pip\\_internal\\commands\\install.py&quot;, line 461, in run installed = install_given_reqs( File &quot;C:\\Users\\LIN\\AppData\\Roaming\\Python\\Python39\\site-packages\\pip\\_internal\\req\\__init__.py&quot;, line 73, in install_given_reqs requirement.install( File &quot;C:\\Users\\LIN\\AppData\\Roaming\\Python\\Python39\\site-packages\\pip\\_internal\\req\\req_install.py&quot;, line 790, in install install_wheel( File &quot;C:\\Users\\LIN\\AppData\\Roaming\\Python\\Python39\\site-packages\\pip\\_internal\\operations\\install\\wheel.py&quot;, line 727, in install_wheel _install_wheel( File &quot;C:\\Users\\LIN\\AppData\\Roaming\\Python\\Python39\\site-packages\\pip\\_internal\\operations\\install\\wheel.py&quot;, line 644, in _install_wheel generated_console_scripts = maker.make_multiple(scripts_to_generate) File &quot;C:\\Users\\LIN\\AppData\\Roaming\\Python\\Python39\\site-packages\\pip\\_vendor\\distlib\\scripts.py&quot;, line 436, in make_multiple filenames.extend(self.make(specification, options)) File &quot;C:\\Users\\LIN\\AppData\\Roaming\\Python\\Python39\\site-packages\\pip\\_internal\\operations\\install\\wheel.py&quot;, line 425, in make return super().make(specification, options) File &quot;C:\\Users\\LIN\\AppData\\Roaming\\Python\\Python39\\site-packages\\pip\\_vendor\\distlib\\scripts.py&quot;, line 425, in make self._make_script(entry, filenames, options=options) File &quot;C:\\Users\\LIN\\AppData\\Roaming\\Python\\Python39\\site-packages\\pip\\_vendor\\distlib\\scripts.py&quot;, line 325, in _make_script self._write_script(scriptnames, shebang, script, filenames, ext) File &quot;C:\\Users\\LIN\\AppData\\Roaming\\Python\\Python39\\site-packages\\pip\\_vendor\\distlib\\scripts.py&quot;, line 249, in _write_script launcher = self._get_launcher(&#x27;t&#x27;) File &quot;C:\\Users\\LIN\\AppData\\Roaming\\Python\\Python39\\site-packages\\pip\\_vendor\\distlib\\scripts.py&quot;, line 404, in _get_launcher raise ValueError(msg)ValueError: Unable to find resource t64.exe in package pip._vendor.distlib[notice] A new release of pip available: 22.2.2 -&gt; 22.3.1[notice] To update, run: python.exe -m pip install --upgrade pip 2、解决方法卸载setuptools 1python -m pip uninstall pip setuptools 123456789101112131415161718192021C:\\Users\\LIN&gt;python -m pip uninstall pip setuptoolsFound existing installation: pip 22.2.2Uninstalling pip-22.2.2: Would remove: c:\\users\\lin\\appdata\\roaming\\python\\python39\\scripts\\pip.exe c:\\users\\lin\\appdata\\roaming\\python\\python39\\scripts\\pip3.9.exe c:\\users\\lin\\appdata\\roaming\\python\\python39\\scripts\\pip3.exe c:\\users\\lin\\appdata\\roaming\\python\\python39\\site-packages\\pip-22.2.2.dist-info\\* c:\\users\\lin\\appdata\\roaming\\python\\python39\\site-packages\\pip\\*Proceed (Y/n)? Successfully uninstalled pip-22.2.2Found existing installation: setuptools 58.1.0Uninstalling setuptools-58.1.0: Would remove: c:\\program files\\python39\\lib\\site-packages\\_distutils_hack\\* c:\\program files\\python39\\lib\\site-packages\\distutils-precedence.pth c:\\program files\\python39\\lib\\site-packages\\pkg_resources\\* c:\\program files\\python39\\lib\\site-packages\\setuptools-58.1.0.dist-info\\* c:\\program files\\python39\\lib\\site-packages\\setuptools\\*Proceed (Y/n)? y Successfully uninstalled setuptools-58.1.0 3、重新输入升级命令1python.exe -m pip install --upgrade pip 123C:\\Users\\LIN&gt;python.exe -m pip install --upgrade pipLooking in indexes: https://pypi.tuna.tsinghua.edu.cn/simpleRequirement already satisfied: pip in c:\\program files\\python39\\lib\\site-packages (22.3.1) 提示已升级 4、重新安装setuptools123456C:\\Users\\LIN&gt;pip install --upgrade setuptoolsLooking in indexes: https://pypi.tuna.tsinghua.edu.cn/simpleCollecting setuptools Using cached https://pypi.tuna.tsinghua.edu.cn/packages/ef/e3/29d6e1a07e8d90ace4a522d9689d03e833b67b50d1588e693eec15f26251/setuptools-65.6.3-py3-none-any.whl (1.2 MB)Installing collected packages: setuptoolsSuccessfully installed setuptools-65.6.3","categories":[{"name":"问题记录","slug":"问题记录","permalink":"https://zilinshisi.github.io/categories/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"python","slug":"python","permalink":"https://zilinshisi.github.io/tags/python/"},{"name":"pip","slug":"pip","permalink":"https://zilinshisi.github.io/tags/pip/"}]},{"title":"【随笔】博文收藏","slug":"【随笔】网页收藏","date":"2022-12-23T02:44:50.000Z","updated":"2023-01-07T01:12:50.817Z","comments":true,"path":"posts/2452520782.html","link":"","permalink":"https://zilinshisi.github.io/posts/2452520782.html","excerpt":"","text":"【WordPress开源免费主题汇总】链接：https://cloud.tencent.com/developer/article/2008499 说明：WordPress最重要的就是找一个适合自己的主题了。好一点的WordPress主题基本上都是要收费的，而且价格还不便宜，这导致了不少的新手朋友们很为难。而有时… 【Django搭建个人博客】链接：https://www.dusaiphoto.com/article/2/ 说明：Django 是一个由 Python 写成的开源Web应用框架，可以用它以更高的效率、更少的代码，搭建一个高性能的个人网站。 如果你以前从未接触过 web 开发，并且想快速上线自己的个性化网站，Django 绝对是你的最佳选择。 【Django-Vue搭建个人博客】链接：https://www.dusaiphoto.com/article/103/ 说明：本教程是一个面向入门者的前后端分离模式开发个人博客的教程，目的是快速搭建现代化的个人博客网站。 教程基于 Django 3 和 Vue 3。","categories":[{"name":"uncategorized","slug":"uncategorized","permalink":"https://zilinshisi.github.io/categories/uncategorized/"}],"tags":[]},{"title":"【随笔】软件分享","slug":"【随笔】软件分享","date":"2022-12-22T02:16:53.000Z","updated":"2023-01-07T01:25:17.937Z","comments":true,"path":"posts/775699185.html","link":"","permalink":"https://zilinshisi.github.io/posts/775699185.html","excerpt":"","text":"【编程开发】Pythonwindow版本python-3.10.1-amd64.exe python-3.9.9-amd64.exe mac版本python-3.7.9-macosx10.9.pkg PyCharmpycharm-professional-2021.2.1.exe pycharm-community-2021.2.2.exe pycharm-professional-213.4631.9.exe vscodevscode文件夹 C++DevC++[Dev-Cpp_5.11_TDM-GCC_4.9.2_Setup](【安装教程】Devc++ | 风铃扬音 (zilinshisi.github.io) “Dev-Cpp_5.11_TDM-GCC_4.9.2_Setup”) 阿里云盘https://www.aliyundrive.com/er/u/4846438ac8f14f5d93c1ae3a919f45e3","categories":[{"name":"问题记录","slug":"问题记录","permalink":"https://zilinshisi.github.io/categories/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"软件分享","slug":"软件分享","permalink":"https://zilinshisi.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%88%86%E4%BA%AB/"},{"name":"阿里云盘","slug":"阿里云盘","permalink":"https://zilinshisi.github.io/tags/%E9%98%BF%E9%87%8C%E4%BA%91%E7%9B%98/"}]},{"title":"【随笔】虚拟机里Centos7的IP地址查看","slug":"虚拟机里centos7的ip地址查看","date":"2022-12-06T14:28:56.000Z","updated":"2023-01-07T01:12:50.820Z","comments":true,"path":"posts/226935312.html","link":"","permalink":"https://zilinshisi.github.io/posts/226935312.html","excerpt":"","text":"为什么这里之所以是查看下IP ，是我想要在虚拟机搭一个测试服务器，需要IP地址，所以我们这里先学会查看虚拟机里的Centos7的IP地址 先登录操作系统 查看ip然后我们输入ip查询命名 ip addr 【图片】 发现ens33 没有inet 这个属性，那么就没法通过IP地址连接虚拟机。 修改配置接着来查看ens33网卡的配置：vi /etc/sysconfig/network-scripts/ifcfg-ens33 【图片】 从配置清单中发现 CentOS 7 默认是不启动网卡的（ONBOOT=no）。 把这一项改为YES（ONBOOT=yes） 重启网络服务保存后重启网络服务： 1sudo service network restart 查ip然后我们再输入命令 1ip addr","categories":[{"name":"问题记录","slug":"问题记录","permalink":"https://zilinshisi.github.io/categories/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"Centos7","slug":"Centos7","permalink":"https://zilinshisi.github.io/tags/Centos7/"},{"name":"虚拟机","slug":"虚拟机","permalink":"https://zilinshisi.github.io/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"}]},{"title":"【随笔】网站收集","slug":"壁纸网站收集","date":"2022-12-01T02:17:29.000Z","updated":"2023-01-07T01:12:50.819Z","comments":true,"path":"posts/1147566553.html","link":"","permalink":"https://zilinshisi.github.io/posts/1147566553.html","excerpt":"","text":"壁纸网站1.极简壁纸:网站地址：http://bz.zzzmh.cn 极简壁纸内的大部分壁纸都来源于WallHaven壁纸网站，主要以人物壁纸（美女）、二次元壁纸为主要内容，每一张壁纸都可以直接用作桌面壁纸。 2.彼岸图网:网站地址：http://pic.netbian.com 这是一款4K壁纸网站，4K风景、4K美女、4K动漫、4K影视、4K明星、4K汽车、4K动物、4K人物、4K背景、4K美食，应有尽有！ 3.Like壁纸网:网站地址：http://www.likebizhi.com 这是一款比较简约的壁纸网站，所有图片都是超清，可以直接右键保存的那种，各种各样的风格都可以任意保存下载。 4.Win4000壁纸网:网站地址：http://www.win4000.com 一个拥有超多高清资源壁纸的国内站，甚至百度搜索出来的很多壁纸都是出自于这个网站。 5.36壁纸:网站地址：http://www.3gbizhi.com 这是一款内含手机壁纸、电脑桌面壁纸的网站，各种各样的风格都可以任意下载。 6.Papers:网站地址：http://papers.co Papers是一个提供4K高清壁纸图像的网站，每天有新的壁纸图片更新，所提供的壁纸都比较漂亮，支持苹果手机、安卓手机、台式机。 7.CgwallPapers网站地址：http://www.cgwallpapers.com CgwallPapers是一个游戏壁纸网站，网站内含免费提高下载多分辨率壁纸，他们是来自世界各地的艺术家创作的，其中有2D和3D渲染的背景、高像素的数字艺术作品。 字体网站1.100font网站地址：https://www.100font.com/ 100font.com是一个专业免费商用字体下载网站。专注于收集整理分享免费商用字体、免版权字体、没有版权的字体、无版权的字体。免费字体下载、免费放心商用。 自媒体相关公众号 Markdown 编辑器网站地址：https://prod.zkqiang.cn/wxeditor/index.html# 一款可以将 Markdown 转换为微信公众号文章的在线编辑器， 这让你在公众号创作时，摆脱繁琐地排版样式， 可以把更多的时间专注于文章本身。","categories":[{"name":"问题记录","slug":"问题记录","permalink":"https://zilinshisi.github.io/categories/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"壁纸","slug":"壁纸","permalink":"https://zilinshisi.github.io/tags/%E5%A3%81%E7%BA%B8/"}]},{"title":"【随笔】wordpress网站全站灰色简单代码","slug":"【随笔】wordpress网站全站灰色简单代码","date":"2022-12-01T02:07:14.000Z","updated":"2023-01-07T01:12:50.815Z","comments":true,"path":"posts/3466157713.html","link":"","permalink":"https://zilinshisi.github.io/posts/3466157713.html","excerpt":"","text":"方法1：将下面代码加入wordpress在后台外观，自定义里面的额外css里即可 123456789html&#123;-webkit-filter: grayscale(100%); /* webkit */-moz-filter: grayscale(100%); /*firefox*/-ms-filter: grayscale(100%); /*ie9*/-o-filter: grayscale(100%); /*opera*/filter: grayscale(100%);filter:progid:DXImageTransform.Microsoft.BasicImage(grayscale=1);filter:gray; /*ie9- */&#125; 方法2：代码加到&lt;head&gt;&lt;/head&gt;之间，即可直接实现全站灰色效果。 代码如下： 123456789101112131415161718192021&lt;!–[if IE]&gt;&lt;style&gt;html &#123; filter:progid:DXImageTransform.Microsoft.BasicImage(grayscale=1); &#125;&lt;/style&gt;&lt;!–&lt;![endif]–&gt;&lt;!–[if !IE]&gt;&lt;–&gt;&lt;style&gt;html&#123;filter:progid:DXImageTransform.Microsoft.BasicImage(grayscale=1);filter: grayscale(100%);-webkit-filter: grayscale(100%);-moz-filter: grayscale(100%);-ms-filter: grayscale(100%);-o-filter: grayscale(100%);filter: url(“data:image/svg+xml;utf8,&lt;svg xmlns=\\”http://www.w3.org/2000/svg\\”&gt;&lt;filter ….3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\\”/&gt;&lt;/filter&gt;&lt;/svg&gt;#grayscale”);filter: progid:DXImageTransform.Microsoft.BasicImage(grayscale=1);filter: gray;-webkit-filter: grayscale(1);&#125;&lt;/style&gt;&lt;!–&lt;![endif]–&gt;","categories":[{"name":"问题记录","slug":"问题记录","permalink":"https://zilinshisi.github.io/categories/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"wordpress","slug":"wordpress","permalink":"https://zilinshisi.github.io/tags/wordpress/"},{"name":"个人网站","slug":"个人网站","permalink":"https://zilinshisi.github.io/tags/%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/"},{"name":"哀悼模式","slug":"哀悼模式","permalink":"https://zilinshisi.github.io/tags/%E5%93%80%E6%82%BC%E6%A8%A1%E5%BC%8F/"}]},{"title":"【随笔】win10/11网络正常无法访问某一个正常网站","slug":"其他网站正常访问，无法访问某一个网站","date":"2022-11-19T08:40:58.000Z","updated":"2023-01-10T06:59:00.507Z","comments":true,"path":"posts/1567024561.html","link":"","permalink":"https://zilinshisi.github.io/posts/1567024561.html","excerpt":"","text":"问题其他网站正常访问，无法访问某一个网站 系统：windows11， 浏览器：chrome、edge、360都不可以 访问 https://g.alicdn.com/de/prismplayer/2.8.2/skins/default/aliplayer-min.css 超时 解决办法首先在 http://ip.tool.chinaz.com 上查询g.alicdn.com的IP地址，如下所示： 然后将三个ip写入C:\\Windows\\System32\\drivers\\etc\\HOSTS文件最后，内容如下所示： 12358.215.157.251 g.alicdn.com 58.215.157.252 g.alicdn.com 222.187.253.252 g.alicdn.com 然后就可以正常访问了 结束不知道什么问题，但是可以解决单个网站无法访问，其他网站正常访问的问题。 记录一下~ 参考文章记无法访问某一个网站，但可以访问其他网站的解决办法","categories":[{"name":"问题记录","slug":"问题记录","permalink":"https://zilinshisi.github.io/categories/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"HOSTS","slug":"HOSTS","permalink":"https://zilinshisi.github.io/tags/HOSTS/"},{"name":"windows10，windows11","slug":"windows10，windows11","permalink":"https://zilinshisi.github.io/tags/windows10%EF%BC%8Cwindows11/"},{"name":"网站访问","slug":"网站访问","permalink":"https://zilinshisi.github.io/tags/%E7%BD%91%E7%AB%99%E8%AE%BF%E9%97%AE/"}]},{"title":"Python画布画爱心/动态爱心","slug":"python画爱心","date":"2022-11-16T02:06:03.000Z","updated":"2023-01-07T01:12:50.810Z","comments":true,"path":"posts/1211407155.html","link":"","permalink":"https://zilinshisi.github.io/posts/1211407155.html","excerpt":"","text":"code123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143import randomfrom math import sin, cos, pi, logfrom tkinter import *CANVAS_WIDTH = 640CANVAS_HEIGHT = 480CANVAS_CENTER_X = CANVAS_WIDTH / 2CANVAS_CENTER_Y = CANVAS_HEIGHT / 2IMAGE_ENLARGE = 11HEART_COLOR = &quot;#FFC0CB&quot; #ff2121def heart_function(t, shrink_ratio: float = IMAGE_ENLARGE): x = 16 * (sin(t) ** 3) y = -(13 * cos(t) - 5 * cos(2 * t) - 2 * cos(3 * t) - cos(4 * t)) x *= shrink_ratio y *= shrink_ratio x += CANVAS_CENTER_X y += CANVAS_CENTER_Y return int(x), int(y)def scatter_inside(x, y, beta=0.15): ratio_x = - beta * log(random.random()) ratio_y = - beta * log(random.random()) dx = ratio_x * (x - CANVAS_CENTER_X) dy = ratio_y * (y - CANVAS_CENTER_Y) return x - dx, y - dydef shrink(x, y, ratio): force = -1 / (((x - CANVAS_CENTER_X) ** 2 + (y - CANVAS_CENTER_Y) ** 2) ** 0.6) # 这个参数... dx = ratio * force * (x - CANVAS_CENTER_X) dy = ratio * force * (y - CANVAS_CENTER_Y) return x - dx, y - dydef curve(p): return 2 * (2 * sin(4 * p)) / (2 * pi)class Heart: def __init__(self, generate_frame=20): self._points = set() # 原始爱心坐标集合 self._edge_diffusion_points = set() # 边缘扩散效果点坐标集合 self._center_diffusion_points = set() # 中心扩散效果点坐标集合 self.all_points = &#123;&#125; # 每帧动态点坐标 self.build(2000) self.random_halo = 1000 self.generate_frame = generate_frame for frame in range(generate_frame): self.calc(frame) def build(self, number): for _ in range(number): t = random.uniform(0, 2 * pi) x, y = heart_function(t) self._points.add((x, y)) for _x, _y in list(self._points): for _ in range(3): x, y = scatter_inside(_x, _y, 0.05) self._edge_diffusion_points.add((x, y)) point_list = list(self._points) for _ in range(4000): x, y = random.choice(point_list) x, y = scatter_inside(x, y, 0.17) self._center_diffusion_points.add((x, y)) @staticmethod def calc_position(x, y, ratio): force = 1 / (((x - CANVAS_CENTER_X) ** 2 + (y - CANVAS_CENTER_Y) ** 2) ** 0.520) # 魔法参数 dx = ratio * force * (x - CANVAS_CENTER_X) + random.randint(-1, 1) dy = ratio * force * (y - CANVAS_CENTER_Y) + random.randint(-1, 1) return x - dx, y - dy def calc(self, generate_frame): ratio = 10 * curve(generate_frame / 10 * pi) # 圆滑的周期的缩放比例 halo_radius = int(4 + 6 * (1 + curve(generate_frame / 10 * pi))) halo_number = int(3000 + 4000 * abs(curve(generate_frame / 10 * pi) ** 2)) all_points = [] heart_halo_point = set() for _ in range(halo_number): t = random.uniform(0, 2 * pi) x, y = heart_function(t, shrink_ratio=11.6) x, y = shrink(x, y, halo_radius) if (x, y) not in heart_halo_point: heart_halo_point.add((x, y)) x += random.randint(-14, 14) y += random.randint(-14, 14) size = random.choice((1, 2, 2)) all_points.append((x, y, size)) for x, y in self._points: x, y = self.calc_position(x, y, ratio) size = random.randint(1, 3) all_points.append((x, y, size)) for x, y in self._edge_diffusion_points: x, y = self.calc_position(x, y, ratio) size = random.randint(1, 2) all_points.append((x, y, size)) for x, y in self._center_diffusion_points: x, y = self.calc_position(x, y, ratio) size = random.randint(1, 2) all_points.append((x, y, size)) self.all_points[generate_frame] = all_points def render(self, render_canvas, render_frame): for x, y, size in self.all_points[render_frame % self.generate_frame]: render_canvas.create_rectangle(x, y, x + size, y + size, width=0, fill=HEART_COLOR)def draw(main: Tk, render_canvas: Canvas, render_heart: Heart, render_frame=0): render_canvas.delete(&#x27;all&#x27;) render_heart.render(render_canvas, render_frame) main.after(160, draw, main, render_canvas, render_heart, render_frame + 1)if __name__ == &#x27;__main__&#x27;: root = Tk() # 一个Tk root.title(&quot;ai&quot;) canvas = Canvas(root, bg=&#x27;black&#x27;, height=CANVAS_HEIGHT, width=CANVAS_WIDTH) canvas.pack() heart = Heart() draw(root, canvas, heart) root.mainloop() 运行效果","categories":[{"name":"python","slug":"python","permalink":"https://zilinshisi.github.io/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"https://zilinshisi.github.io/tags/python/"},{"name":"tkinter","slug":"tkinter","permalink":"https://zilinshisi.github.io/tags/tkinter/"},{"name":"动态爱心","slug":"动态爱心","permalink":"https://zilinshisi.github.io/tags/%E5%8A%A8%E6%80%81%E7%88%B1%E5%BF%83/"},{"name":"爱心","slug":"爱心","permalink":"https://zilinshisi.github.io/tags/%E7%88%B1%E5%BF%83/"}]},{"title":"【随笔】关于vscode安装包下载太慢","slug":"【随笔】关于vscode安装包下载太慢","date":"2022-10-13T06:23:01.000Z","updated":"2023-01-10T06:59:33.846Z","comments":true,"path":"posts/3282907910.html","link":"","permalink":"https://zilinshisi.github.io/posts/3282907910.html","excerpt":"","text":"记录VScode如果在官网下载速度慢的解决方法 首先打开官网下载页面选择 点击前往官网下载 进入下载界面 可以看到速度太慢 复制下载地址，去新建一个下载，将下载地址中的 az764295.vo.msecnd.net 更换为 vscode.cdn.azure.cn 使用国内的镜像服务器加速，就好了。","categories":[{"name":"问题记录","slug":"问题记录","permalink":"https://zilinshisi.github.io/categories/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"vscode","slug":"vscode","permalink":"https://zilinshisi.github.io/tags/vscode/"},{"name":"下载","slug":"下载","permalink":"https://zilinshisi.github.io/tags/%E4%B8%8B%E8%BD%BD/"}]},{"title":"python案例：天天向上的力量","slug":"python案例：天天向上的力量","date":"2022-10-08T14:24:44.000Z","updated":"2023-01-07T01:12:50.805Z","comments":true,"path":"posts/508570005.html","link":"","permalink":"https://zilinshisi.github.io/posts/508570005.html","excerpt":"","text":"问题描述工作日模式要努力到什么水平，才能与每天努力1%一样？ A君: 一年365天，每天进步1%，不停歇 B君: 一年365天，每周工作5天休息2天，休息日下降1% ，要多努力呢？ 每周工作5天休息2天，计算工作日的努力参数是多少才能与每天努力1%一样。 要求如下：(1) 一年365天，以第0天的能力值为基数，记为1.0； (2) 当好好学习时，能力值相比前一天提高1%；当没有学习时，由于遗忘等原因能力值相比前一天下降1%； 输出示例10.019 保留小数点后三位 先算出每天都努力，365天后的结果为： 123goday = 1goday = goday*1.01**365print(round(goday,2)) 参考代码12345678910111213141516# def workday(df): work_day = 1 for i in range(365): if i % 7 in [6,0]: work_day = work_day*(1 - 0.01) else: work_day = work_day*(1 + df) return work_dayparam = 0.01# 每天都努力的值every_day = 1every_day = round((every_day*1.01**365),2)while workday(param) &lt; every_day: param += 0.001print(round(param,3))","categories":[{"name":"题集","slug":"题集","permalink":"https://zilinshisi.github.io/categories/%E9%A2%98%E9%9B%86/"}],"tags":[{"name":"python","slug":"python","permalink":"https://zilinshisi.github.io/tags/python/"},{"name":"循环","slug":"循环","permalink":"https://zilinshisi.github.io/tags/%E5%BE%AA%E7%8E%AF/"}]},{"title":"【安装教程】Devc++","slug":"【安装教程】devc","date":"2022-10-08T04:12:18.000Z","updated":"2023-01-07T01:20:38.130Z","comments":true,"path":"posts/2076096595.html","link":"","permalink":"https://zilinshisi.github.io/posts/2076096595.html","excerpt":"","text":"【软件名称】：Dev-Cpp_5.11_TDM-GCC_4.9.2_Setup.exe 【安装环境】：Win7/Win8/Win10 联网 【下载链接】： https://www.aliyundrive.com/s/eBcohb4HgPH 【提取码】: gr26 安装碰到问题可以联系qq：1399213555 1、下载Dev C++安装包官网下载 Dev-C++ download SourceForge.net 2、Dev C++ 图文安装教程第一步：执行安装包程序，点击ok 第二步：点击 I Agree 第三步：不做修改点击next 第四步：选择安装路径：使用默认路径（可修改），选择完后点击安装(install) 第五步,点击Finish，完成并运行程序 第六步：选择简体中文,点击next 注：这里一定要记得选择简体中文，不然界面就会变成英文界面如图 第七步：选择主题： DEVC++安装完成 3、DEVC++汉化step01点击菜单栏的Tools选项，然后点击Environment Options… step02在弹出的窗口右半中部Language部分点击下来选择中文如图所示 step03点击ok-点击确认就完成了 （如果没有看到，可以拖动滚动条上拉） 语言修改为简体中文","categories":[{"name":"安装记录","slug":"安装记录","permalink":"https://zilinshisi.github.io/categories/%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"IDEL","slug":"IDEL","permalink":"https://zilinshisi.github.io/tags/IDEL/"}]},{"title":"C++基础语法学习记录01","slug":"c基础语法学习记录01","date":"2022-10-03T02:28:03.000Z","updated":"2023-01-07T01:12:50.801Z","comments":true,"path":"posts/734194669.html","link":"","permalink":"https://zilinshisi.github.io/posts/734194669.html","excerpt":"","text":"Cpp基础框架1234567#include &lt;iostream&gt;using namespace std;int main()&#123; cout &lt;&lt; &quot;Hello World&quot;; return 0;&#125; include &lt;头文件名称&gt;“头文件”可以理解为C++的工具库,这些头文件包含了程序中必需的或有用的信息。iostream库包含了最基本的程序输入/输出功能。 using namespace std;固定写法，告诉编译器使用 std 命名空间。用于省略部分C++的繁琐代码。好比我们的姓名是由姓+名组成的，但是平时我们一般只叫别人的名字，很少叫全名。 int main()固定写法，程序的主函数，程序从这里开始执行。大括号括起来的部分表示函数；内部的内容main函数需要一个返回值，必须为整数。 cout &lt;&lt; “Hello World”;cout输出指令，在终端输出尖括号后面的内容 return 0;固定写法。让程序正常结束并退出，并向调用进程返回值 0。。在信息学相关竞赛中，程序结束时的状态必须为0，否则认为程序异常。 cpp分号和块 在 C++ 中，分号是语句结束符。它表明一个逻辑实体的结束。 例如，下面是三个不同的语句： 1234int x;int y=114115;x = y;y = y+1; 块是用大括号括起来的按逻辑连接的语句。例如： 1234&#123; cout &lt;&lt; &quot;Hello World&quot;; return 0;&#125; C++ 不以行末作为结束符的标识，因此，可以在一行上放置多个语句。例如： 1234int x;int y=114115;x = y;y = y+1; 等价于 1int x;int y=114115;x = y;y = y+1;","categories":[{"name":"基础语法","slug":"基础语法","permalink":"https://zilinshisi.github.io/categories/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"}],"tags":[{"name":"c++","slug":"c","permalink":"https://zilinshisi.github.io/tags/c/"}]},{"title":"python爬虫：B站视频下载","slug":"python爬虫：b站视频下载","date":"2022-09-22T14:09:42.000Z","updated":"2023-01-07T01:12:50.808Z","comments":true,"path":"posts/513296044.html","link":"","permalink":"https://zilinshisi.github.io/posts/513296044.html","excerpt":"","text":"教程（暂无） 完整代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970# -*- coding : utf-8 -*-import requestsimport reimport jsonimport subprocessimport os# 必须 &quot;referer&quot;: &quot;https://message.bilibili.com/&quot;headers = &#123; &quot;user-agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36&quot;, &quot;referer&quot;: &quot;https://message.bilibili.com/&quot;&#125;def send_request(url): response = requests.get(url=url, headers=headers) return response# 获取视频标题，视频链接，音频链接def get_video_data(html_data): title = re.findall(&#x27;&lt;title data-vue-meta=&quot;true&quot;&gt;(.*?)&lt;/title&gt;&#x27;, html_data)[0].replace(&quot;_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili&quot;, &quot;&quot;) json_data = re.findall( r&#x27;&lt;script&gt;window.__playinfo__=(.*?)&lt;/script&gt;&#x27;, html_data)[0] json_data = json.loads(json_data) audio_url = json_data[&quot;data&quot;][&quot;dash&quot;][&quot;audio&quot;][0][&quot;backupUrl&quot;][0] video_url = json_data[&quot;data&quot;][&quot;dash&quot;][&quot;video&quot;][0][&quot;backupUrl&quot;][0] video_data = [title, audio_url, video_url] return video_data# 下载def save_data(file_name, audio_url, video_url): print(&quot;[+] 正在下载 &quot; + file_name + &quot;的音频...&quot;) audio_data = send_request(audio_url).content print(&quot;[+] 完成下载 &quot; + file_name + &quot;的音频！&quot;) print(&quot;[+] 正在下载 &quot; + file_name + &quot;的视频...&quot;) video_data = send_request(video_url).content print(&quot;[+] 完成下载 &quot; + file_name + &quot;的视频！&quot;) with open(file_name + &quot;.mp3&quot;, &quot;wb&quot;) as f: f.write(audio_data) with open(file_name + &quot;.mp4&quot;, &quot;wb&quot;) as f: f.write(video_data)# 合并def video_add_mp4(file_name, mp4_file): print(&quot;[+] 正在合并 &quot; + mp4_file + &quot;的视频...&quot;) outfile_name = file_name.split(&#x27;.&#x27;)[0] + &#x27;-new.mp4&#x27; # FFmpeg的位置 cmd = f&#x27;E:\\\\FFmpeg\\\\bin\\\\ffmpeg -i &#123;mp4_file&#125; -i &#123;file_name&#125; -acodec copy -vcodec copy &#123;outfile_name&#125;&#x27; print(cmd) subprocess.call(cmd, shell=True) print(&quot;[+] 完成合并 &quot; + mp4_file + &quot;的视频！&quot;) print(&quot;[+] 清理mp3文件 &quot; + file_name) os.remove(file_name) print(&quot;[+] 完成清理mp3文件：&quot; + file_name) print(&quot;[+] 清理mp4文件：&quot; + file_name) os.remove(mp4_file) print(&quot;[+] 完成清理mp4文件：&quot; + file_name)def main(): url = input(&quot;输入bilibili视频对应的链接即可下载：&quot;) html_data = send_request(url).text video_data = get_video_data(html_data) save_data(video_data[0], video_data[1], video_data[2]) print(video_data[0], video_data[1], video_data[2]) # merge_data(video_data[0]) a = video_data[0]+&quot;.mp3&quot; b = video_data[0]+&quot;.mp4&quot; video_add_mp4(a, b)if __name__ == &quot;__main__&quot;: main() ffmpeg下载链接：https://pan.baidu.com/s/1k_EdT-hXFnuCYU_sWrD2oQ 提取码：shpu","categories":[{"name":"python","slug":"python","permalink":"https://zilinshisi.github.io/categories/python/"}],"tags":[{"name":"爬虫","slug":"爬虫","permalink":"https://zilinshisi.github.io/tags/%E7%88%AC%E8%99%AB/"}]},{"title":"python案例：货币转换 I","slug":"python案例：货币转换 I","date":"2022-09-21T04:49:40.000Z","updated":"2023-01-07T01:12:50.793Z","comments":true,"path":"posts/1259944154.html","link":"","permalink":"https://zilinshisi.github.io/posts/1259944154.html","excerpt":"","text":"问题描述人民币和美元是世界上通用的两种货币之一，写一个程序进行货币间币值转换，其中：‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬ 人民币和美元间汇率固定为：1美元 = 6.78人民币。‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬ 程序可以接受人民币或美元输入，转换为美元或人民币输出。人民币采用RMB表示，美元USD表示，符号和数值之间没有空格。‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬ 输入示例1‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬1RMB123 输出示例1‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬1USD18.14 输入示例2‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬1USD20 输出示例2‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬1RMB135.60 需求分析： 人民币转换为美元 美元转换为人名币 划分边界（IPO）： 输入：带有人民币或美元标志的值 处理：根据币种选择适当的转换算法 输出：人民币或美元标志的值 输入输出格式设置标识放在数值后面，RMB表示人民币，USD表示美元 例： 100RMB 100USD 设计算法根据汇率，得到如下式子： $ RMB = USD \\times 6.78 $ $ USD = RMB \\div 6.78 $ 参考代码1234567891011moneystr = input(&quot;请输入带有符号的数值：&quot;)bs = moneystr[-3:]bs = bs.upper()if bs in [&#x27;RMB&#x27;]: RMB = (eval(moneystr[:-3])/6.78) print(&quot;转换后的数值是:&#123;:.2f&#125;USD&quot;.format(RMB))elif bs in [&#x27;USD&#x27;]: USD = (eval(moneystr[:-3])*6.78) print(&quot;转换后的数值是:&#123;:.2f&#125;RMB&quot;.format(USD))else: print(&quot;输入格式错误&quot;)","categories":[{"name":"题集","slug":"题集","permalink":"https://zilinshisi.github.io/categories/%E9%A2%98%E9%9B%86/"}],"tags":[{"name":"python","slug":"python","permalink":"https://zilinshisi.github.io/tags/python/"},{"name":"条件分支","slug":"条件分支","permalink":"https://zilinshisi.github.io/tags/%E6%9D%A1%E4%BB%B6%E5%88%86%E6%94%AF/"}]},{"title":"Cpp基础知识：字符串的基础操作","slug":"cpp基础知识：字符串的基础操作","date":"2022-09-18T04:30:54.000Z","updated":"2023-01-07T01:12:50.800Z","comments":true,"path":"posts/2312646557.html","link":"","permalink":"https://zilinshisi.github.io/posts/2312646557.html","excerpt":"","text":"C++ 字符串c++提供了两种类型的字符串表示形式： C语言风格字符串 C++引入的string类类型 C 风格字符串C 风格的字符串起源于 C 语言，并在 C++ 中继续得到支持。字符串实际上是使用 null 字符 \\0 终止的一维字符数组。因此，一个以 null 结尾的字符串，包含了组成字符串的字符。 下面的声明和初始化创建了一个 BELL 字符串。由于在数组的末尾存储了空字符，所以字符数组的大小比单词 BELL 的字符数多一个。 1char site[6] = &#123;&#x27;B&#x27;, &#x27;E&#x27;, &#x27;L&#x27;, &#x27;L&#x27;, &#x27;\\0&#x27;&#125;; 依据数组初始化规则，可以把上面的语句写成以下语句： 1char site[] = &quot;BELL&quot;; 其实，不用把 null 字符放在字符串常量的末尾。C++ 编译器会在初始化数组时，自动把 \\0 放在字符串的末尾。 C++风格字符串C++ 中有大量的函数用来操作以 null 结尾的字符串: 作用 函数 解释 字符串复制 strcpy(str1,str2); 复制字符串 str2 到字符串 str1。 字符串连接 strcat(str1,str2); 连接字符串 str2 到字符串 str1 的末尾。连接字符串也可以用 + 号，例如: string str1 = &quot;bell&quot;; string str2 = &quot;AI&quot;; string str = str1 + str2; 字符串长度 strlen(str1); 返回字符串 str1 的长度。 字符串比较 strcmp(str1,str2); 如果 str1 和 str2 是相同的，则返回 0；如果 str1&lt;str2 则返回值小于 0；如果 str1&gt;str2 则返回值大于 0。 字符查找 strchr(str1, ch); 返回一个指针，指向字符串 str1 中字符 ch 的第一次出现的位置。 字符串查找 strstr(str1,str2); 返回一个指针，指向字符串 str1 中字符串 str2 的第一次出现的位置。 下面的实例使用了上述的一些函数： 123456789101112131415161718192021222324252627282930313233#include &lt;iostream&gt;#include &lt;cstring&gt;using namespace std;int main ()&#123; char str1[13] = &quot;bell&quot;; char str2[13] = &quot;AI&quot;; char str3[13]; int len ; // 复制 str1 到 str3 strcpy( str3, str1); cout &lt;&lt; &quot;复制 str1 到 str3 strcpy( str3, str1) : &quot; &lt;&lt; str3 &lt;&lt; endl; // 字符串比较 int con1 = strcmp( str1, str2) ; int con2 = strcmp( str1, str3) ; int con3 = strcmp( str2, str3) ; cout &lt;&lt; &quot;字符串比较：str1&lt;str2 &quot; &lt;&lt; con1 &lt;&lt; endl; cout &lt;&lt; &quot;字符串比较：str1==str3 &quot; &lt;&lt; con2 &lt;&lt; endl; cout &lt;&lt; &quot;字符串比较：str2&gt;str3 &quot; &lt;&lt; con3 &lt;&lt; endl; // 连接 str1 和 str2 strcat( str1, str2); cout &lt;&lt; &quot;连接 str1 和 str2 strcat( str1, str2): &quot; &lt;&lt; str1 &lt;&lt; endl; // 连接后，str1 的总长度 len = strlen(str1); cout &lt;&lt; &quot;连接后， str1 的总长度 strlen(str1) : &quot; &lt;&lt; len &lt;&lt; endl; // 查找 return 0;&#125; 执行以上代码的结果： 123456复制 str1 到 str3 strcpy( str3, str1) : bell字符串比较：str1&lt;str2 1字符串比较：str1==str3 0字符串比较：str2&gt;str3 -1连接 str1 和 str2 strcat( str1, str2): bellAI连接后， str1 的总长度 strlen(str1) : 6 C++ 中的 String 类C++ 标准库提供了 **string 类**类型，支持上述所有的操作，另外还增加了其他更多的功能。 示例： 123456789101112131415161718192021222324#include &lt;iostream&gt;#include &lt;string&gt;using namespace std;int main ()&#123; string str1 = &quot;bell&quot;; string str2 = &quot;AI&quot;; string str3; cout &lt;&lt; &quot;字符串复制前 str3 : &quot; &lt;&lt; str3 &lt;&lt; endl; // 复制 str1 到 str3 str3 = str1; cout &lt;&lt; &quot;字符串复制后 str3 : &quot; &lt;&lt; str3 &lt;&lt; endl; // 连接 str1 和 str2 str3 = str1 + str2; cout &lt;&lt; &quot;字符串连接 str1 + str2 : &quot; &lt;&lt; str3 &lt;&lt; endl; // 连接后，str3 的总长度 cout &lt;&lt; &quot;字符串长度 str3.size() : &quot; &lt;&lt; str3.size() &lt;&lt; endl; return 0;&#125; 运行结果如下： 1234字符串复制前 str3 :字符串复制后 str3 : bell字符串连接 str1 + str2 : bellAI字符串长度 str3.size() : 6","categories":[{"name":"C++","slug":"C","permalink":"https://zilinshisi.github.io/categories/C/"}],"tags":[{"name":"c++","slug":"c","permalink":"https://zilinshisi.github.io/tags/c/"},{"name":"字符串","slug":"字符串","permalink":"https://zilinshisi.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"},{"name":"String","slug":"String","permalink":"https://zilinshisi.github.io/tags/String/"}]},{"title":"python案例：温度转换","slug":"python案例：温度转换","date":"2022-09-18T03:53:14.000Z","updated":"2023-01-07T01:12:50.807Z","comments":true,"path":"posts/2343770970.html","link":"","permalink":"https://zilinshisi.github.io/posts/2343770970.html","excerpt":"","text":"问题将输入的摄氏或华氏温度转换为华氏或摄氏温度输出。 温度刻画的两种不同体系 摄氏度 中国等世界大多数国家使用 ​ 以1标准大气压下的结冰点为0°，沸点为100°，将温度进行等分刻画。 华氏度 美国、英国等国家使用 ​ 以1标准大气压下的结冰点为32°，沸点为212°，将温度进行等分刻画。 需求分析：-摄氏度转换为华氏度 -华氏度转换为摄氏度 问题分析：温度数值需要标明温度体系，即摄氏度或者华氏度 转换后也需要给出温度体系 划分边界（IPO）：输入 带有华氏或摄氏标志的温度值 处理 根据温度标志选择适当的温度转换算法 输出 摄氏或华氏标志的温度值 输入输出格式设置标识放在温度最后，F表示华氏度，C表示摄氏度 例 82F表示华氏82度，28C表示摄氏28度 设计算法根据华氏和摄氏温度定义，利用转换公式如下： $C=(F-32) \\div 1.8$ $F = C \\times 1.8 + 32$ 参考代码123456789tempstr = input(&quot;请输入带有符号的温度值：&quot;)if tempstr[-1] in [&#x27;f&#x27;, &#x27;F&#x27;]: c = (eval(tempstr[:-1])-32)/1.8 print(&quot;转换后的温度是:&#123;:.2f&#125;C&quot;.format(c))elif tempstr[-1] in [&#x27;C&#x27;, &#x27;c&#x27;]: F = (eval(tempstr[:-1])*1.8+32) print(&quot;转换后的温度是:&#123;:.2f&#125;F&quot;.format(F))else: print(&quot;输入格式错误&quot;)","categories":[{"name":"题集","slug":"题集","permalink":"https://zilinshisi.github.io/categories/%E9%A2%98%E9%9B%86/"}],"tags":[{"name":"python","slug":"python","permalink":"https://zilinshisi.github.io/tags/python/"},{"name":"条件分支","slug":"条件分支","permalink":"https://zilinshisi.github.io/tags/%E6%9D%A1%E4%BB%B6%E5%88%86%E6%94%AF/"}]},{"title":"python自动化：selenium+cookie自动登录新浪微博（二）","slug":"python自动化：seleniumcookie自动登录新浪微博（二）","date":"2022-09-07T07:31:16.000Z","updated":"2023-01-07T01:12:50.809Z","comments":true,"path":"posts/2850875788.html","link":"","permalink":"https://zilinshisi.github.io/posts/2850875788.html","excerpt":"","text":"首先导入包1234from selenium import webdriverimport jsonimport osimport time 打开自动化窗口1234567# 打开网址 wb = webdriver.Chrome(&quot;C:\\Program Files (x86)\\Google\\Chrome\\Application\\chromedriver.exe&quot;) # 隐式地等待 wb.implicitly_wait(3) wb.maximize_window() wb.get(&#x27;https://weibo.com&#x27;) time.sleep(5) 添加cookie12345678910111213141516# 向浏览器添加保存的cookiestry: cookies = json.load(open(&quot;cookies.txt&quot;, &quot;rb&quot;)) for cookie in cookies: cookie_dict = &#123; &quot;domain&quot;: cookie.get(&#x27;domain&#x27;), &#x27;name&#x27;: cookie.get(&#x27;name&#x27;), &#x27;value&#x27;: cookie.get(&#x27;value&#x27;), &quot;expires&quot;: &quot;&quot;, &#x27;path&#x27;: &#x27;/&#x27;, &#x27;httpOnly&#x27;: False, &#x27;HostOnly&#x27;: False, &#x27;Secure&#x27;: False&#125; wb.add_cookie(cookie_dict)except Exception as e: print(e) 添加cookie后记得刷新浏览器123## 刷新time.sleep(10)wb.refresh() 注：可以在这里添加你想要的操作内容 操作过后就记得关闭12# 关闭浏览器wb.close()","categories":[{"name":"python","slug":"python","permalink":"https://zilinshisi.github.io/categories/python/"}],"tags":[{"name":"selenium","slug":"selenium","permalink":"https://zilinshisi.github.io/tags/selenium/"}]},{"title":"【安装教程】win64位MySQL5.7.32下载、安装及配置","slug":"【安装教程】win64位MySQL5.7.32下载、安装及配置","date":"2022-09-07T07:07:44.000Z","updated":"2023-01-07T01:12:50.796Z","comments":true,"path":"posts/1654634653.html","link":"","permalink":"https://zilinshisi.github.io/posts/1654634653.html","excerpt":"","text":"mysql-5.7.32-winx64下载进入MySQL官网https://www.mysql.com依次选择DOWNLOADS–&gt; MySQL Community (GPL) Downloads » –&gt;MySQL Community Server–&gt;Archives 然后选择适用版本，这里我下载的是5.7.32免安装64位的 直达链接😜 https://downloads.mysql.com/archives/community/ 开始安装下载的为压缩包，将文件解压在适合的位置，保存的路径不要有中文，以免出现各种无法解决的BUG。 开始配置以管理员模式打开命令行cmd，打开后如图红框： 1、 转到MySQL文件夹bin目录下： 2、安装MySQL服务：mysqld –install 3、初始化数据库（mysqld –initialize –console）， 末尾会出现初始随机密码，第5步需要使用。 4、开启服务：net start MySQL 5、登入MySQL：mysql -u（用户名）-p –&gt;回车后输入密码 修改密码由于系统随机的密码太过复杂，不方便记忆。所以可以修改一下密码，一个易于自己记忆、输入的密码。 首先登录MySQL。 格式：mysql&gt; set password for 用户名@localhost = password(‘新密码’); 例子：mysql&gt; set password for root@localhost = password(‘123’); 验证密码是否修改成功 –&gt;首先退出登入（exit） –&gt;使用新密码重新登入 最后：在mysql目录下创建一个ini或cnf配置文件，在这里我创建的是ini配置文件，里面写的代码是mysql的一些基本配置。 123456789[mysqld]character-set-server=utf8mb4bind-address=0.0.0.0port=3306default-storage-engine=INNODB[mysql]default-character-set=utf8mb4[client]default-character-set=utf8mb4 就这样，一个免安装版的Mysql就安装并配置完成了，全局配置下次再弄。 感谢Winton-H 原文链接https://www.cnblogs.com/winton-nfs/p/11524007.html","categories":[{"name":"安装记录","slug":"安装记录","permalink":"https://zilinshisi.github.io/categories/%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"https://zilinshisi.github.io/tags/mysql/"},{"name":"安装教程","slug":"安装教程","permalink":"https://zilinshisi.github.io/tags/%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"}]},{"title":"python案例：循环输出应用-九九乘法表","slug":"python案例：循环输出应用-九九乘法表","date":"2022-09-07T07:07:31.000Z","updated":"2023-01-07T01:12:50.806Z","comments":true,"path":"posts/2659950568.html","link":"","permalink":"https://zilinshisi.github.io/posts/2659950568.html","excerpt":"","text":"先做个类99乘法表的阶梯输出下列图像 12345678** ** * ** * * ** * * * ** * * * * ** * * * * * ** * * * * * * * range()函数可创建一个整数列表，一般用在 for 循环中。 使用for循环打印 12for i in range(9): print(&quot;*\\t&quot;*i) 尝试乘法表输出九九乘法表 1234567891×1=1 1×2=2 2×2=4 1×3=3 2×3=6 3×3=9 1×4=4 2×4=8 3×4=12 4×4=16 1×5=5 2×5=10 3×5=15 4×5=20 5×5=25 1×6=6 2×6=12 3×6=18 4×6=24 5×6=30 6×6=36 1×7=7 2×7=14 3×7=21 4×7=28 5×7=35 6×7=42 7×7=49 1×8=8 2×8=16 3×8=24 4×8=32 5×8=40 6×8=48 7×8=56 8×8=64 1×9=9 2×9=18 3×9=27 4×9=36 5×9=45 6×9=54 7×9=63 8×9=72 9×9=81 上代码 1234for i in range(1, 10): for j in range(1, i+1): print(&quot;%d×%d=%d&quot;%(j, i, j*i), end=&quot;\\t&quot;) print(end=&quot;\\n&quot;)","categories":[{"name":"题集","slug":"题集","permalink":"https://zilinshisi.github.io/categories/%E9%A2%98%E9%9B%86/"}],"tags":[{"name":"python","slug":"python","permalink":"https://zilinshisi.github.io/tags/python/"},{"name":"循环","slug":"循环","permalink":"https://zilinshisi.github.io/tags/%E5%BE%AA%E7%8E%AF/"}]},{"title":"【常用命令】MySQL","slug":"【常用命令】MySQL","date":"2022-09-07T07:07:20.000Z","updated":"2023-01-07T01:12:50.798Z","comments":true,"path":"posts/341523779.html","link":"","permalink":"https://zilinshisi.github.io/posts/341523779.html","excerpt":"","text":"登入MySQL mysql -u（用户名）-p –&gt;回车后输入密码 例： mysql -u root -p –&gt;Enter –&gt; 123456 –&gt;Enter 退出登入MySQL 第一种方法 exit 第一种方法 quit 第一种方法 \\q 启动/停止 服务 启动服务 net start mysql 停止服务 net stot mysql 查看服务启动状态123window+R--&gt; services.msc--&gt; 找到MySQL 操作数据库特别提醒：数据库内的命令必须以英文状态下“;”结尾！ 显示数据库列表。 show databases; 显示数据表的结构： describe 表名; desc 表名; 建库与删库： create database 库名; drop database 库名;","categories":[{"name":"命令记录","slug":"命令记录","permalink":"https://zilinshisi.github.io/categories/%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"https://zilinshisi.github.io/tags/mysql/"}]},{"title":"C++算法：基础排序练习","slug":"c算法：基础排序练习","date":"2022-09-07T07:07:16.000Z","updated":"2023-01-07T01:12:50.802Z","comments":true,"path":"posts/2428707981.html","link":"","permalink":"https://zilinshisi.github.io/posts/2428707981.html","excerpt":"","text":"选择排序选择排序，对输入的n个数字进行升序排列。 输入第一行一个数n, 第二行n个待排序的数字ai。 输出一行升序排列，n个用空格隔开的数字。 输入样例1244 3 2 1 输出样例11 2 3 4 说明/提示对100%数据，n≤1000,ai≤1000000。 题解完整代码及注释说明12345678910111213141516171819202122232425262728293031323334353637383940414243#include &lt;iostream&gt;using namespace std;// 定义数组int arr[] = &#123;&#125;;// 交换函数void swap_(int &amp;a, int &amp;b)&#123; int temp = a; a = b; b = temp;&#125;// 选择排序void selectSort(int arr[], int n)&#123; for (int i = 0; i &lt; n - 1; i++)&#123; // 找到最小值的索引 int minIndex = i; for (int j = i + 1; j &lt; n; j++)&#123; // 如果找到比最小值小的，则更新最小值的索引 if (arr[j] &lt; arr[minIndex])&#123; // 将最小值的索引更新为当前值的索引 minIndex = j; &#125; &#125; // 将最小值与当前值交换 swap_(arr[i], arr[minIndex]); &#125;&#125;int main()&#123; int a; cin &gt;&gt; a; // 初始化数组 for (int i = 0; i &lt; a; i++) &#123; int b; cin &gt;&gt; b; arr[i] = b; &#125; // selectSort(arr, a); // 输出数组 for (int i = 0; i &lt; a; i++) &#123; cout &lt;&lt; arr[i] &lt;&lt; &quot; &quot;; &#125; return 0;&#125; 冒泡排序对输入的n个数字进行升序排列。每趟冒一个当前最大数字到后面。依次输出每一趟排序的结果，。 输入第一行一个数n, 第二行n个待排序的数字ai。 输出n行，每行n个用空格隔开的数字，表示这一次的结果。 输入样例1244 3 2 1 输出样例12343 2 1 42 1 3 41 2 3 41 2 3 4 说明/提示对100%数据，n≤1000,ai≤1000000。 题解完整代码及注释说明1234567891011121314151617181920212223242526272829303132333435363738394041#include &lt;iostream&gt;using namespace std;// 定义数组int arr[] = &#123;&#125;;// 交换函数void swap_(int &amp;a, int &amp;b)&#123; int temp = a; a = b; b = temp;&#125;// 冒泡排序void bubbleSort(int arr[], int n)&#123; // 循环n-1次 for (int i = 0; i &lt; n; i++) &#123; // 循环n-i-1次 for (int j = 0; j &lt; n - i - 1; j++) &#123; // 如果前面的数比后面的数大，则交换 if (arr[j] &gt; arr[j + 1]) &#123; swap_(arr[j], arr[j + 1]); &#125; &#125; // 打印每次排序后的数组 for (int k = 0; k &lt; n; k++) &#123; cout &lt;&lt; arr[k] &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl; &#125;&#125;int main()&#123; int a; cin &gt;&gt; a; // 初始化数组 for (int i = 0; i &lt; a; i++) &#123; int b; cin &gt;&gt; b; arr[i] = b; &#125; // 调用冒泡排序函数 bubbleSort(arr, a); return 0;&#125; 纸牌插排纸牌牌面从小到大的顺序依次为3~10，J，Q，K，1，2，小王，大王。 输入20张牌的大小，其中1~10用数字本身表示，JQK用11，12，13表示，小王和大王用20和30表示。 输出整理好顺序的20张牌的大小，空格隔开。 输入样例12 1 4 4 3 6 10 13 12 11 30 20 7 8 9 4 5 5 5 5 输出样例13 4 4 4 5 5 5 5 6 7 8 9 10 11 12 13 1 2 20 30 完整代码及注释说明12345678910111213141516171819202122232425262728293031323334353637383940414243#include &lt;iostream&gt;using namespace std;// 定义数组int arr[] = &#123;&#125;;// 插入排序void insertSort(int arr[], int n)&#123; // 对于未排序的元素，从后向前扫描，找到相应位置 for (int i = 1; i &lt; n; i++) &#123; // 定义临时变量，用于存储待插入元素 int temp = arr[i]; int j = i - 1; // 循环比较，找到插入位置 while (j &gt;= 0 &amp;&amp; arr[j] &gt; temp) &#123; arr[j + 1] = arr[j]; j--; &#125; // 插入元素 arr[j + 1] = temp; &#125;&#125;int main()&#123; int a = 20; // 初始化数组 for (int i = 0; i &lt; a; i++) &#123; int b; cin &gt;&gt; b; // 将输入的1和2转换为14和15 if (b == 1 ) arr[i] = 14; else if (b == 2 ) arr[i] = 15; else arr[i] = b; &#125; // 调用排序函数 insertSort(arr, a); // 输出排序的结果 for (int l = 0; l &lt; a; l++) &#123; // 将14和15转换为1和2输出 if (arr[l]==14) cout &lt;&lt; 1 &lt;&lt; &quot; &quot;; else if(arr[l]==15) cout &lt;&lt; 2 &lt;&lt; &quot; &quot;; else cout &lt;&lt; arr[l] &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl; return 0;&#125;","categories":[{"name":"C++","slug":"C","permalink":"https://zilinshisi.github.io/categories/C/"}],"tags":[{"name":"排序","slug":"排序","permalink":"https://zilinshisi.github.io/tags/%E6%8E%92%E5%BA%8F/"}]},{"title":"python自动化：selenium自动登录登录新浪微博（一）","slug":"python自动化：selenium自动登录登录新浪微博（一）","date":"2022-09-07T07:07:08.000Z","updated":"2023-01-07T01:12:50.811Z","comments":true,"path":"posts/1998955732.html","link":"","permalink":"https://zilinshisi.github.io/posts/1998955732.html","excerpt":"","text":"接上个文章，因为失败，思考了一下原因，参考了其他的博主。 使用cookie可以免密码登入网站。 所以自动化登录微博首先需要获取已经登录微博后浏览器的cookie。 接下来上代码： 12345678910111213141516171819202122232425262728293031# 导入需要的数据包from selenium import webdriverimport time# 将获取的cookie保存在json文件中import json# 首先创建函数(*^_^*)def get_cookies(): # 保存cookies的文件 file = &#x27;cookies.json&#x27; # 打开需要获取cookies的网站 wb = webdriver.Chrome(&quot;C:\\Program Files (x86)\\Google\\Chrome\\Application\\chromedriver.exe&quot;) wb.implicitly_wait(3) wb.get(&#x27;https://weibo.com&#x27;) # 网站打开后，在时间内手动执行登录操作 time.sleep(60) # 登录成功后，获取cookies并保存为json格式 cookies = wb.get_cookies() fp = open(file,&#x27;w&#x27;) json.dump(cookies,fp) fp.close() #关闭浏览器 wb.close()# 执行代码获得cookieif __name__ == &quot;__main__&quot;: get_cookies() 注意： chromedriver 版本有多个， 可以根据不同的需求到淘宝镜像网下载http://npm.taobao.org/mirrors/chromedriver/","categories":[{"name":"python","slug":"python","permalink":"https://zilinshisi.github.io/categories/python/"}],"tags":[{"name":"selenium","slug":"selenium","permalink":"https://zilinshisi.github.io/tags/selenium/"}]},{"title":"python：excel文件转csv","slug":"python：excel文件转csv","date":"2022-09-07T07:07:02.000Z","updated":"2023-01-07T01:12:50.812Z","comments":true,"path":"posts/2904697357.html","link":"","permalink":"https://zilinshisi.github.io/posts/2904697357.html","excerpt":"","text":"0. 使用库xlsx文件解析处理： openpyxl库 csv文件格式生成：csv 1. 导入openpyxl模块1import openpyxl #导入模块openpyxl openpyxl是第三方模块，需要先安装 1pip install openpyxl 2. 读取文件1workbook = openpyxl.load_workbook(&#x27;info.xlsx&#x27;) #获取表格文件 3. 获取目标sheetsheet：EXCEL默认打开时一般有多个工作表：Sheet1、Sheet2、Sheet3…，Sheet1是其中的一个工作表。如果需要的话，可以在工作簿中新建多个工作表。 获取工作簿中所有工作表名称12345import openpyxl workbook = openpyxl.load_workbook(&#x27;info.xlsx&#x27;) #获取表格文件sheets = workbook.sheetnamesprint(sheets,type(sheets))print(sheets[0]) 结果： [‘info’, ‘Sheet1’, ‘Sheet2’] &lt;class ‘list’&gt; info 知道目标sheet名称1234import openpyxl workbook = openpyxl.load_workbook(&#x27;info.xlsx&#x27;) #获取表格文件workbook_sheet = workbook[&quot;info&quot;] #获取表单print(workbook_sheet.cell(row=1,column=1).value) #输出表单第一行第一列的值 结果： 电影名 注意：get_sheet_by_name()方法已经未使用了，继续使用会出现警告：DeprecationWarning: Call to deprecated function get_sheet_by_name (Use wb[sheetname]). 案例： 1234import openpyxl workbook = openpyxl.load_workbook(&#x27;info.xlsx&#x27;) #获取表格文件workbook_sheet = workbook.get_sheet_by_name(&quot;info&quot;) #获取表单print(workbook_sheet.cell(row=1,column=1).value) #输出表单第一行第一列的值 123456&quot;&quot;&quot;输出结果e:\\python\\shuju\\ceshi.py:3: DeprecationWarning: Call to deprecated function get_sheet_by_name (Use wb[sheetname]). workbook_sheet = workbook.get_sheet_by_name(&quot;info&quot;) #获取表单电影名&quot;&quot;&quot; 获取活跃sheet12345import openpyxl workbook = openpyxl.load_workbook(&#x27;info.xlsx&#x27;) #获取表格文件workbook_sheet = workbook.active #获取活跃表格print(workbook_sheet.title) #获取活跃表格名称 结果： info 遇到的问题1、处理数据时，正常存储显示的中文在写入到csv文件时变成了乱码，文件的编码未能正确处理中文，需要在写入csv文件时指定编码。 2、写入多出一行空白行 1with open(filename, &#x27;a&#x27;, newline=&#x27;&#x27;, encoding=&#x27;utf-8-sig&#x27;) as f: 完整代码12345678910111213def xlsx_to_csv(filename1, filename2): workbook = openpyxl.load_workbook(filename1) table = workbook.active # utf-8-sig: 可以解决中文乱码问题 with open(filename2,&quot;w&quot;, encoding=&quot;utf-8-sig&quot;) as f: write = csv.writer(f) data = [] for i in range(1,table.max_row+1): row_stack = [] for j in range(1,table.max_column+1): row_stack.append(table.cell(row=i,column=j).value) data.append(row_stack) write.writerows(data) 个人博客：lingyier自学笔记 本文链接：python程序01:excel文件转csv","categories":[{"name":"uncategorized","slug":"uncategorized","permalink":"https://zilinshisi.github.io/categories/uncategorized/"}],"tags":[]},{"title":"python自动化：selenium自动登录新浪微博（失败版）","slug":"python自动化：selenium自动登录新浪微博（失败版）","date":"2022-09-07T07:07:00.000Z","updated":"2023-01-07T01:12:50.813Z","comments":true,"path":"posts/2392011464.html","link":"","permalink":"https://zilinshisi.github.io/posts/2392011464.html","excerpt":"","text":"这是第一次代码，结果为失败123456789101112131415161718192021222324252627282930313233#-*-codeing = utf-8-*-#@Author : MTR#@File : SinaDemo.py#@Software : PyCharmfrom typing import refrom selenium import webdriverimport timewb = webdriver.Chrome(&quot;C:\\Program Files (x86)\\Google\\Chrome\\Application\\chromedriver.exe&quot;)wb.implicitly_wait(3)# wb.get(&#x27;https://weibo.com/&#x27;)wb.get(&#x27;https://passport.weibo.cn/signin/login&#x27;)# 输入你的用户名-----------锁定用户名输入框----------------输入elem = wb.find_element_by_xpath(&quot;//*[@id=&#x27;loginName&#x27;]&quot;)elem.send_keys(&quot;********&quot;) # 输入你的用户名-----------# 输入密码------------------锁定密码输入框----------------输入elem = wb.find_element_by_xpath(&quot;//*[@id=&#x27;loginPassword&#x27;]&quot;)elem.send_keys(&quot;*********&quot;) # 输入密码elem = wb.find_element_by_xpath(&quot;//*[@id=&#x27;loginAction&#x27;]&quot;)elem.click()# 简化代码输入版# wb.find_element_by_xpath(&quot;//*[@id=&#x27;loginName&#x27;]&quot;).send_keys(&quot;********&quot;) # 输入你的用户名# wb.find_element_by_xpath(&quot;//*[@id=&#x27;loginPassword&#x27;]&quot;).send_keys(&quot;*********&quot;) # 输入密码# 点击登录==回车# wb.find_element_by_xpath(&quot;//*[@id=&#x27;loginAction&#x27;]&quot;).click() chromedriver下载链接http://npm.taobao.org/mirrors/chromedriver/","categories":[{"name":"python","slug":"python","permalink":"https://zilinshisi.github.io/categories/python/"}],"tags":[{"name":"selenium","slug":"selenium","permalink":"https://zilinshisi.github.io/tags/selenium/"}]},{"title":"【安装教程】Centos 7 安装MySQL5.7","slug":"【安装教程】centos-7-安装mysql5-7","date":"2022-09-07T06:28:18.000Z","updated":"2023-01-07T01:12:50.814Z","comments":true,"path":"posts/943112479.html","link":"","permalink":"https://zilinshisi.github.io/posts/943112479.html","excerpt":"","text":"1、下载MySQL官方的 Yum Repository12cd ~ &amp;&amp; mkdir /usr/mysql &amp;&amp; cd /usr/mysqlwget -i -c http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm 2、用yum安装Yum Repository1yum -y install mysql57-community-release-el7-10.noarch.rpm 3、安装MySQL服务器1yum -y install mysql-community-server 4、Mysql设置启动Mysql数据库：1systemctl start mysqld.service 查看Mysql运行状态：1systemctl status mysqld.service 出现以下信息，表示MySQL正常运行12345678910111213● mysqld.service - MySQL Server Loaded: loaded (/usr/lib/systemd/system/mysqld.service; enabled; vendor preset: disabled) Active: active (running) since Tue 2022-09-06 16:28:18 CST; 18s ago Docs: man:mysqld(8) http://dev.mysql.com/doc/refman/en/using-systemd.html Process: 19800 ExecStart=/usr/sbin/mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid $MYSQLD_OPTS (code=exited, status=0/SUCCESS) Process: 19747 ExecStartPre=/usr/bin/mysqld_pre_systemd (code=exited, status=0/SUCCESS) Main PID: 19803 (mysqld) CGroup: /system.slice/mysqld.service └─19803 /usr/sbin/mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pidSep 06 16:28:14 hecs-235841 systemd[1]: Starting MySQL Server...Sep 06 16:28:18 hecs-235841 systemd[1]: Started MySQL Server. 5、修改数据库密码①此时MySQL已经开始正常运行，不过要想进入MySQL还得先找出此时root用户的密码，通过如下命令可以在日志文件中找出密码： 1grep &quot;password&quot; /var/log/mysqld.log ②执行上述命令的结果 12[root@hecs-235841 mysql]# grep &quot;password&quot; /var/log/mysqld.log2022-09-06T08:28:15.815694Z 1 [Note] A temporary password is generated for root@localhost: ozhw9tuaCi*A 密码是结果root@localhost:之后的字段 ③使用此命令进入数据库： 1mysql -uroot -p ④修改数据库进入密码： 1mysql&gt; ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;new password&#x27;; 其中‘new password’替换成你要设置的密码，注意:密码设置必须要大小写字母数字和特殊符号（,/’;:等）,不然不能配置成功","categories":[{"name":"安装记录","slug":"安装记录","permalink":"https://zilinshisi.github.io/categories/%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"centos","slug":"centos","permalink":"https://zilinshisi.github.io/tags/centos/"},{"name":"mysql","slug":"mysql","permalink":"https://zilinshisi.github.io/tags/mysql/"},{"name":"安装教程","slug":"安装教程","permalink":"https://zilinshisi.github.io/tags/%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"}]},{"title":"算法练习：4张牌凑24点","slug":"算法练习：4张牌凑24点","date":"2022-03-09T03:38:31.000Z","updated":"2023-01-07T01:12:50.820Z","comments":true,"path":"posts/2355115010.html","link":"","permalink":"https://zilinshisi.github.io/posts/2355115010.html","excerpt":"","text":"今天想和大家讨论的是一道我从这学期cs的期末考试得到灵感的题：Get 24 Poker Game。说到 Get 24 Poker Game，也就是我们通常说的凑24点，大家可能都比较熟悉。但是因为这个游戏有很多变种，我们还是来简单说一下游戏的规则。老规矩，上Wikipedia： The 24 Game is an arithmetical card game in which the objective is to find a way to manipulate four integers so that the end result is 24. 简单来说，这个游戏需要玩家快速用随机抽出的四张牌上的整数通过常见的加减乘除计算来凑出24点来取得胜利（一定要用全4张，不可以弃牌）。不同于我们通常玩的斗地主，钓鱼等等扑克游戏，凑24点更考验玩家的数学反应能力（less fun but somewhat interesting:)）。在这里稍稍跑一下题，因为可能会有人好奇，为什么恰恰选了24这个数字。其实答案很直白，因为这个数字最容易被凑出来：24是拥有八个除数的最小整数(1, 2, 3, 4, 6, 8, 12, and 24），使用这个数字不仅仅把游戏变得更加简单（毕竟可能没有人想花一个小时在用扑克牌凑数上），还把游戏作废（目标数字凑不出来）的几率降到最小。 第一部分的大意是写出一个函数，让其能够以列表的形式接收四个数字并试图用加减乘除的方法来凑出目标点数（注意，这里不包括括号操作）。 第二部分相对于前一部分难度更高一点，要求写出函数，让其能够接受四个数字，并可通过对其进行加减乘除（这里包括括号）的操作来凑出目标点数。 通过读题，我们可以发现第一题和第二题最主要的差别在以下两点上： 第一题只需要考虑四个数字，三个符号的排列组合。 第二题需要考虑到一个，或者多个括号的算法，在这种情况下，我们不能直接计算结果，因为没有办法确定括号的个数和位置。 第一部分我们可以从运算式子的结构入手。正常写出的话，一个有四个运算数字的式子会长这个样子： $${1+2+3+4}$$ 结构一目了然，四个数字，三个运算符号。如果想生成所有排列组合的可能性的话，我们可以用嵌套for循环很容易的用代码实现如下： 1234567def get_all_comb(num_list): for op_1 in [&#x27;+&#x27;,&#x27;-&#x27;,&#x27;*&#x27;,&#x27;/&#x27;]: # 用第一个for loop来考虑所有第一个位置的运算符号的可能性 for op_2 in [&#x27;+&#x27;,&#x27;-&#x27;,&#x27;*&#x27;,&#x27;/&#x27;]: # 用第二个for loop来考虑所有第二个位置的运算符号的可能性 for op_3 in [&#x27;+&#x27;,&#x27;-&#x27;,&#x27;*&#x27;,&#x27;/&#x27;]: # 用第三个for loop来考虑所有第三个位置的运算符号的可能性 # 构造一个字符串 comb = str(num_list[0])+op_1+str(num_list[1])+op_2+str(num_list[2])+op_3+str(num_list[3]) print(comb) # 打印运算式 这段代码的输出结果为 ‘1+2+3+4’，‘1+2+3-4’，‘1+2+3*4’…等等六十四个不重复的运算式。但是我们还要考虑到所有数字的排列组合的情况，注意在以上的例子里，所有运算的数字是没有变化的，但数字位置的变化在多数情况下会对运算结果造成影响，也就是说在我们改变运算符号的同时，我们也要考虑到所有数字的排列情况。 同样，我们也可以用以上相似的嵌套循环逻辑来用代码实现： 123456789def get_num_comb(num_list): all_comb = [] # 准备收集所有排列组合 for i in range(4): # 三个嵌套for循环分别对应在num_list里的序数 for j in range(4): for k in range(4): for l in range(4): # 确定没有重复元素 if i != j and i != k and i != l and j != k and j != l and k != l: print([num_list[i], num_list[j], num_list[k]]) #打印最终结果 但是我们可以通过以上两段代码发现，在这里用for loop来分别实现符号和数字的排列组合虽然是可行的（同理我们也可以用类似的for loop结构来），但却无法延伸到这道题的局限外，也就是说，这个思路仅限于这道题的Part 1，如果要做第二部分的话，我们需要重新写这部分的函数（这也是这两道题的第一个主要差别：数字数量的不确定性）。 为了使第一部分的解法可以延伸到第二题，我们需要换个思路。很自然的，为了解决数字数量的不确定问题，我们不能够再使用for loop这种需要定量条件的方法，而是使用递归（recursion）。 以上我们讨论到的两个问题，运算符号以及运算数字的排列组合，可以被分别写作两个递归函数。比起普通循环，递归函数的结构更加复杂。为了减少码代码时出现不必要的概念不清的错误，我们可以针对每个递归画出树形图来作结构分析。 我们先来看运算符号的递归规律，如果我们有三个需要考虑的运算位置的话，树形图便如下图： 通过观察，我们可以看到第一层有4个分支，第二层有16个，第三层有64个。不难看出，这个递归规律的复杂度是随着递归的深度而以二次增长，所以可以用Big-Oh Notation表达成 O(4^n)，n为运算符号的个数。（关于运算复杂度和常见algorithm会有后续文章跟进，在这里不做过多解释） 根据以上基础结构，我们可以用代码来写出生成运算符号的递归函数，如下： 复制代码 1234567891011121314def generate_permutated_list(num_list): # 建立base case if len(num_list) == 0: return [] # 当n为0时不返回任何数字 if len(num_list) == 1: return [num_list] # 当n为1时返回所有式子，作为之后首数字的基础 list_of_comb = [] # 新建列表来存更新的排列 for i in range(len(num_list)): first_num = num_list[i] # 生成首字母 for j in generate_permutated_list(num_list[:i] + num_list[i+1:]): # 去除首字母，继续递归 list_of_comb.append([first_num] + j) #加入新的list return list_of_comb # 最后返回最终结果 如果再次检查运算复杂度，我们不难看出这个函数的复杂度符合我们的预测，为O(4^n)。 好了，我们再来看数字的排列方法。如果想要找到固定数量的数字的所有排列方式，我们需要用到permutation的逻辑：找到所有排列（长度为n）的第一个元素，然后根据每个元素找到剩余数字的第一个元素（剩余数字排列长度为n-1），以此类推，直到最后只剩余一个数字。我们来看一下这个递归思路的树状图（此树状图用了长度为三的list为例）： 递归的第一层有三个元素，第二层有3_2=6个元素，第三层有3_2*1=6个元素，我们可以看出这个逻辑的复杂度为 O(n!), n为需要排列组合数字的个数。 Permutation的逻辑比运算符号的排列稍稍复杂，但是我们可以用类似的递归结构来解决不同的问题，代码如下： 复制代码 12345678910111213def generate_permutated_list(num_list): # 建立base case if len(num_list) == 0: return [] # 当n为0时不返回任何数字 if len(num_list) == 1: return [num_list] # 当n为1时返回所有式子，作为之后首数字的基础 list_of_comb = [] # 新建列表来存更新的排列 for i in range(len(num_list)): first_num = num_list[i] # 生成首字母 for j in generate_permutated_list(num_list[:i] + num_list[i+1:]): # 去除首字母，继续递归 list_of_comb.append([first_num] + j) #加入新的list return list_of_comb # 最后返回最终结果 分别生成数学操作符号以及所有数字的排列组合后，我们要把两个组合整合起来，以此生成所有的排列可能性。因为这里我们不用考虑排列组合数列的不确定性的问题（每个排列的长度，以及每组数学操作符号的长度维持不变），我们可以用循环的思维来生成所有数学表达式（所有数字和数学操作符号的组合）。但是生成所有数学表达式还不能完整的解决这个问题，因为我们不仅仅要生成所有的数学表达式，还要把表达式估值并和最终的目标数字进行比较。所以在组合最终的函数之前，我们需要先写一个估值函数来方便之后的使用。 估值函数的难点在于数学操作符号的处理，因为在数学表达式里这些运算符号都是以字符串的形式表达，例如 ‘+’，‘-’，所以无法当作正常运算符号放到代码中来操作。所以在这个情况，我们要重新赋予这些字符串它们象征的含义，代码如下： 复制代码 12345678910111213141516171819202122232425def modify_op(equation, op): &#x27;&#x27;&#x27;this function modify the given equation by only computing the section with the given operators parameters: equation: a list that represents a given mathematical equation which may or may not contain the given numerical operators. Ex, [&#x27;1&#x27;,&#x27;+&#x27;,&#x27;2&#x27;] represents the equation 1+2 op: a string that is the given numerical operators&#x27;&#x27;&#x27; # 这里我们把代表数学计算的字符串和以上定义的操作函数的名字以字典的方式联系并储存起来 operators = &#123;&#x27;/&#x27;:division, &#x27;*&#x27;:multiply, &#x27;+&#x27;:add, &#x27;-&#x27;:subtract&#125; while op in equation: # 用while循环来确保没有遗漏任何字符 i = equation.index(op) # 找到表达式内的第一处需要计算的字符位置 if op == &#x27;/&#x27; and equation[i+1] == &#x27;0&#x27;: # 考虑除法操作的被除数为0的情况 return [&#x27;&#x27;] # 把表达式需要计算的部分替换成计算结果 equation[i-1:i+2] = [str(operators[op](float(equation[i-1]), float(equation[i+1])))] # 注意这里调用了前面字典里储存的函数名 return equation # 返回结果def evaluate(equation): &#x27;&#x27;&#x27;return the evaluated result in float for the equation&#x27;&#x27;&#x27; for op in [&#x27;/&#x27;,&#x27;*&#x27;,&#x27;+&#x27;,&#x27;-&#x27;]: # 这里需要注意标点顺序，除在最先，因为需要考虑特殊情况，乘其次，然后才是加减 equation = modify_op(equation, op) # 使用helper function return equation[0] # 最后返回最终计算结果 这里我们需要注意，这个估值函数能够接收表达式的形式为list，而list里的每项也必须要用字符串的形式来表达。 最后，我们只要按照之前提到的思路，整合表达式，并用以上估值函数来计算表达式的值，就可以完成这道题。在给出完整代码之前，我们再来最后复习一下这道题的解题思路： 找出所有加减乘除的排列组合 找出所有数字的排列组合 整合所有表达式可能 用估值函数计算表达式 对比表达式答案和目标数 返回符合要求的表达式","categories":[{"name":"题集","slug":"题集","permalink":"https://zilinshisi.github.io/categories/%E9%A2%98%E9%9B%86/"}],"tags":[{"name":"algorithm","slug":"algorithm","permalink":"https://zilinshisi.github.io/tags/algorithm/"},{"name":"python算法练习","slug":"python算法练习","permalink":"https://zilinshisi.github.io/tags/python%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/"}]},{"title":"hexo博客：butterfly主题解决无法显示Latex数学公式","slug":"hexo博客：butterfly主题解决无法显示latex数学公式","date":"2022-02-19T07:07:18.000Z","updated":"2023-01-07T01:12:50.802Z","comments":true,"path":"posts/580449646.html","link":"","permalink":"https://zilinshisi.github.io/posts/580449646.html","excerpt":"","text":"Hexo博客支持mathjax安装渲染器 hexo默认的渲染器是marked，并不支持mathjax。kramed是在marked基础上修改的，支持了mathjax。你的hexo工程目录下的node_modules中可以找到对应的渲染器文件夹。同时在你的工程目录下用以下命令安装kramed。 12npm uninstall hexo-renderer-marked --savenpm install hexo-renderer-kramed --save 修改配置文件到主题配置文件中_config.yml，找到mathjax，将其修改为true即可 12mathjax: enable: true 文章渲染标签为加快渲染速度，渲染器只会在标签中有mathjax: true的文章中使用利用mathjax渲染。 123456title: Markdown_math_formula_chartags: markdownabbrlink: 475360334date: 2022-02-19 09:41:53comments: truemathjax: true Try随后就可以试一试啦 123$$\\begin&#123;eqnarray&#125; \\sigma(z) \\equiv \\frac&#123;1&#125;&#123;1+e^&#123;-z&#125;&#125;.\\end&#123;eqnarray&#125;$$","categories":[{"name":"Hexo博客","slug":"Hexo博客","permalink":"https://zilinshisi.github.io/categories/Hexo%E5%8D%9A%E5%AE%A2/"}],"tags":[{"name":"hexo博客","slug":"hexo博客","permalink":"https://zilinshisi.github.io/tags/hexo%E5%8D%9A%E5%AE%A2/"},{"name":"Latex","slug":"Latex","permalink":"https://zilinshisi.github.io/tags/Latex/"}]},{"title":"Cpp基础知识：字符串之比较函数strcmp()","slug":"cpp基础知识：字符串之比较函数strcmp","date":"2022-02-11T04:46:28.000Z","updated":"2023-01-07T01:12:50.799Z","comments":true,"path":"posts/485474045.html","link":"","permalink":"https://zilinshisi.github.io/posts/485474045.html","excerpt":"","text":"1、介绍描述C 库函数 int strcmp(const char *str1, const char *str2) 把 str1 所指向的字符串和 str2 所指向的字符串进行比较。 声明：1int strcmp(const char *str1, const char *str2); 头文件：C++中的用法 1#include &lt;cstring&gt; 功能：用来比较两个字符串 参数：s1、s2为两个进行比较的字符串 返回值该函数返回值如下： 如果返回值小于 0，则表示 str1 小于 str2。 如果返回值大于 0，则表示 str1 大于 str2。 如果返回值等于 0，则表示 str1 等于 str2。 说明：strcmp()函数是根据ACSII码的值来比较两个字符串的； strcmp()函数首先将str1字符串的第一个字符值减去str2第一个字符，若差值为零则继续比较下去；若差值不为零，则返回差值。 示例/用法12345678910111213141516#include&lt;iostream&gt;#include&lt;cstring&gt;using namespace std;int main ()&#123; char str1[15]; char str2[15]; int ret; strcpy(str1, &quot;abcdef&quot;); strcpy(str2, &quot;ABCDEF&quot;); ret = strcmp(str1, str2); printf(&quot;%d&quot;,ret); return 0;&#125;","categories":[{"name":"C++","slug":"C","permalink":"https://zilinshisi.github.io/categories/C/"}],"tags":[{"name":"c++","slug":"c","permalink":"https://zilinshisi.github.io/tags/c/"},{"name":"strcmp","slug":"strcmp","permalink":"https://zilinshisi.github.io/tags/strcmp/"},{"name":"字符串","slug":"字符串","permalink":"https://zilinshisi.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"}]},{"title":"hexo博客：优化博客文章链接","slug":"hexo博客：优化博客文章链接","date":"2022-02-07T13:50:54.000Z","updated":"2023-01-07T01:12:50.804Z","comments":true,"path":"posts/445515387.html","link":"","permalink":"https://zilinshisi.github.io/posts/445515387.html","excerpt":"","text":"问题在Hexo的默认设定中，博客文章链接是由:year/:month/:day/:title/构成的，即按照年：月：日：标题的格式来生成链接，如果文章标题中还含有中文的话，复制URL链接就会有一大串编码字符，想分享博客文章链接可能会出现以下场景： 如果使用hexo-abbrlink插件的话，这个问题便能很好地解决了！ 安装配置步骤 首先在博客根目录运行Git Bash，输入以下指令安装hexo-abbrlink： 1npm install hexo-abbrlink --save 打开站点配置文件_config.yml，修改url、permalink为： 12url: https://ling71.gitee.io/blog/ #网址/blog/permalink: posts/:abbrlink.html 3,.在站点配置文件_config.yml中添加以下代码： 1234#abbrlink配置abbrlink: alg: crc32 # 算法：crc16(default) and crc32 rep: dec # 进制：dec(default) and hex 其中alg和rep为算法和进制，具体区别见下表： 算法 进制 生成链接 crc16 hex https://amnesia-f.github.io/posts/66c8.html crc16 dec https://amnesia-f.github.io/posts/65535.html crc32 hex https://amnesia-f.github.io/posts/8ddf18fb.html crc32 dec https://amnesia-f.github.io/posts/1690090958.html 修改文件后，执行以下代码部署到gitee即可！ 12hexo clean &amp;&amp; hexo ghexo d 结果可以看到，使用这款插件后，博客文章链接缩短了很多，起到了很好的优化效果：","categories":[{"name":"Hexo博客","slug":"Hexo博客","permalink":"https://zilinshisi.github.io/categories/Hexo%E5%8D%9A%E5%AE%A2/"}],"tags":[{"name":"hexo博客","slug":"hexo博客","permalink":"https://zilinshisi.github.io/tags/hexo%E5%8D%9A%E5%AE%A2/"}]},{"title":"hexo博客：如何新建一个博文","slug":"hexo博客：如何新建一个博文","date":"2022-02-06T05:10:22.000Z","updated":"2023-01-07T01:12:50.803Z","comments":true,"path":"posts/687529883.html","link":"","permalink":"https://zilinshisi.github.io/posts/687529883.html","excerpt":"","text":"新建博文在本地根目录打开git ，使用命令新建博文 1hexo new [layout] &lt;title&gt; layout 是博文的布局，默认为 post ，可以不写。 title 是文件的名字，储存在 source/_posts 下。 注意这里的title不是文章名，具体文章中显示的文章标题可以在文章文件中修改， 其中[layout]在scaffolds中，默认情况下有三个模板post、draft、page 参数 功能 路径 post 新建文章 /source/_posts/ draft 新建草稿 /source/_drafts/ page 新建页面（标签页，分类页等） /source/ 创建文章123$ hexo new hexo如何新建一个博文...INFO Created: ~\\blog\\source\\_posts\\hexo如何新建一个博文.md 这样就创建了一篇名为”hexo如何新建一个博文”的文章了 在MarkDown编辑器上打开就可以编辑了 Front-matter 设置Front-matter 是文件最上方以 --- 分隔的区域，用于指定个别文件的变量，举例来说： 12345---title: hexo如何新建一个博文date: 2022-02-06 13:10:57tags:hexo--- 以下是预先定义的参数，可以在模板中使用这些参数值并加以利用。 官方文档 参数 描述 默认值 layout 布局 config.default_layout title 标题 文章的文件名 date 建立日期 文件建立日期 updated 更新日期 文件更新日期 comments 开启文章的评论功能 true tags 标签（不适用于分页） 无 categories 分类（不适用于分页） 无 permalink 覆盖文章网址 excerpt Page excerpt in plain text. Use this plugin to format the text disableNunjucks Disable rendering of Nunjucks tag &#123;&#123; &#125;&#125;/&#123;% %&#125; and tag plugins when enabled lang Set the language to override auto-detection Inherited from _config.yml 自己设置需要的变量 1234---tags: hexocategories: 博客--- 注意 参数和值之间要用空格分隔。","categories":[{"name":"Hexo博客","slug":"Hexo博客","permalink":"https://zilinshisi.github.io/categories/Hexo%E5%8D%9A%E5%AE%A2/"}],"tags":[{"name":"hexo博客","slug":"hexo博客","permalink":"https://zilinshisi.github.io/tags/hexo%E5%8D%9A%E5%AE%A2/"}]},{"title":"python爬虫：获取b站某个up的视频aid、cid","slug":"python爬虫：获取b站某个up的视频aid、cid","date":"2022-01-12T13:28:45.000Z","updated":"2023-01-07T01:12:50.810Z","comments":true,"path":"posts/801597125.html","link":"","permalink":"https://zilinshisi.github.io/posts/801597125.html","excerpt":"","text":"获取B站up的全部视频aid、cid 代码比较乱，请轻喷 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657import requestsimport jsondef get_json(UserUid): # UserUid = &#x27;2026561407&#x27; # up主主页url url_data = &#x27;https://api.bilibili.com/x/space/acc/info?mid=&#x27; + UserUid + &#x27;&amp;jsonp=jsonp&#x27; # 视频集合页url url_video = &#x27;https://api.bilibili.com/x/space/arc/search?mid=&#x27; + UserUid + &#x27;&amp;pn=1&amp;ps=25&amp;index=1&amp;jsonp=jsonp&#x27; headers = &#123;&#x27;user-agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36 Edg/88.0.705.63&#x27;&#125; # ---------------获取数据------------------------ data = requests.get(url=url_data, headers=headers) video = requests.get(url=url_video, headers=headers) # ---------------转化数据------------------------- data_info = json.loads(data.text) video_info = json.loads(video.text) # ---------------数据获取------------------------- Uid = data_info[&quot;data&quot;][&quot;mid&quot;] Name = data_info[&quot;data&quot;][&quot;name&quot;] Video_AID = [] for i in range(10): # Video = info3[&quot;data&quot;][&quot;list&quot;][&quot;vlist&quot;] Video_title = video_info[&quot;data&quot;][&quot;list&quot;][&quot;vlist&quot;][i][&quot;title&quot;] Video_play = video_info[&quot;data&quot;][&quot;list&quot;][&quot;vlist&quot;][i][&quot;play&quot;] Video_review = video_info[&quot;data&quot;][&quot;list&quot;][&quot;vlist&quot;][i][&quot;video_review&quot;] Video_aid = video_info[&quot;data&quot;][&quot;list&quot;][&quot;vlist&quot;][i][&quot;aid&quot;] # print(type(Video_aid)) Video_AID.append(Video_aid) # print(&quot;-----%s的B站第%s个视频信息-----&quot;%(Name,i)) # print(&quot;\\tUid:%s&quot;%Uid) # print(&quot;\\tVideo_title:%s\\n&quot; # &quot;\\t播放量:%s\\n&quot; # &quot;\\t评论数:%s\\n&quot; # &quot;\\t视频aid:%s&quot; # %(Video_title, Video_play, Video_review, Video_aid) # ) return Video_AIDdef get_cid(Video_aid): Video_CID = [] for i in Video_aid: url = &quot;https://api.bilibili.com/x/player/pagelist?aid=&quot; + str(i) + &quot;&amp;jsonp=jsonp&quot; headers = &#123; &#x27;user-agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36 Edg/88.0.705.63&#x27;&#125; v_data = requests.get(url=url, headers=headers) v_cid_info = json.loads(v_data.text) video_cid = v_cid_info[&quot;data&quot;][0][&quot;cid&quot;] Video_CID.append(video_cid) # print(&quot;\\t视频aid:%s&quot; % i, end=&quot;&quot;) # print(&quot;\\t视频cid:%s&quot; % video_cid) return Video_CIDif __name__ == &#x27;__main__&#x27;: Video_AID = get_json(&#x27;2026561407&#x27;) Video_Cid = get_cid(Video_AID) # print(Video_Cid) 文章可自行全篇转载或部分摘取，注明出处→贴个原文链接意思意思一下即可。谢谢😜","categories":[{"name":"python","slug":"python","permalink":"https://zilinshisi.github.io/categories/python/"}],"tags":[{"name":"爬虫","slug":"爬虫","permalink":"https://zilinshisi.github.io/tags/%E7%88%AC%E8%99%AB/"}]}],"categories":[{"name":"问题记录","slug":"问题记录","permalink":"https://zilinshisi.github.io/categories/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"},{"name":"uncategorized","slug":"uncategorized","permalink":"https://zilinshisi.github.io/categories/uncategorized/"},{"name":"python","slug":"python","permalink":"https://zilinshisi.github.io/categories/python/"},{"name":"题集","slug":"题集","permalink":"https://zilinshisi.github.io/categories/%E9%A2%98%E9%9B%86/"},{"name":"安装记录","slug":"安装记录","permalink":"https://zilinshisi.github.io/categories/%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/"},{"name":"基础语法","slug":"基础语法","permalink":"https://zilinshisi.github.io/categories/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"},{"name":"C++","slug":"C","permalink":"https://zilinshisi.github.io/categories/C/"},{"name":"命令记录","slug":"命令记录","permalink":"https://zilinshisi.github.io/categories/%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/"},{"name":"Hexo博客","slug":"Hexo博客","permalink":"https://zilinshisi.github.io/categories/Hexo%E5%8D%9A%E5%AE%A2/"}],"tags":[{"name":"web","slug":"web","permalink":"https://zilinshisi.github.io/tags/web/"},{"name":"python","slug":"python","permalink":"https://zilinshisi.github.io/tags/python/"},{"name":"pip","slug":"pip","permalink":"https://zilinshisi.github.io/tags/pip/"},{"name":"软件分享","slug":"软件分享","permalink":"https://zilinshisi.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%88%86%E4%BA%AB/"},{"name":"阿里云盘","slug":"阿里云盘","permalink":"https://zilinshisi.github.io/tags/%E9%98%BF%E9%87%8C%E4%BA%91%E7%9B%98/"},{"name":"Centos7","slug":"Centos7","permalink":"https://zilinshisi.github.io/tags/Centos7/"},{"name":"虚拟机","slug":"虚拟机","permalink":"https://zilinshisi.github.io/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"},{"name":"壁纸","slug":"壁纸","permalink":"https://zilinshisi.github.io/tags/%E5%A3%81%E7%BA%B8/"},{"name":"wordpress","slug":"wordpress","permalink":"https://zilinshisi.github.io/tags/wordpress/"},{"name":"个人网站","slug":"个人网站","permalink":"https://zilinshisi.github.io/tags/%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/"},{"name":"哀悼模式","slug":"哀悼模式","permalink":"https://zilinshisi.github.io/tags/%E5%93%80%E6%82%BC%E6%A8%A1%E5%BC%8F/"},{"name":"HOSTS","slug":"HOSTS","permalink":"https://zilinshisi.github.io/tags/HOSTS/"},{"name":"windows10，windows11","slug":"windows10，windows11","permalink":"https://zilinshisi.github.io/tags/windows10%EF%BC%8Cwindows11/"},{"name":"网站访问","slug":"网站访问","permalink":"https://zilinshisi.github.io/tags/%E7%BD%91%E7%AB%99%E8%AE%BF%E9%97%AE/"},{"name":"tkinter","slug":"tkinter","permalink":"https://zilinshisi.github.io/tags/tkinter/"},{"name":"动态爱心","slug":"动态爱心","permalink":"https://zilinshisi.github.io/tags/%E5%8A%A8%E6%80%81%E7%88%B1%E5%BF%83/"},{"name":"爱心","slug":"爱心","permalink":"https://zilinshisi.github.io/tags/%E7%88%B1%E5%BF%83/"},{"name":"vscode","slug":"vscode","permalink":"https://zilinshisi.github.io/tags/vscode/"},{"name":"下载","slug":"下载","permalink":"https://zilinshisi.github.io/tags/%E4%B8%8B%E8%BD%BD/"},{"name":"循环","slug":"循环","permalink":"https://zilinshisi.github.io/tags/%E5%BE%AA%E7%8E%AF/"},{"name":"IDEL","slug":"IDEL","permalink":"https://zilinshisi.github.io/tags/IDEL/"},{"name":"c++","slug":"c","permalink":"https://zilinshisi.github.io/tags/c/"},{"name":"爬虫","slug":"爬虫","permalink":"https://zilinshisi.github.io/tags/%E7%88%AC%E8%99%AB/"},{"name":"条件分支","slug":"条件分支","permalink":"https://zilinshisi.github.io/tags/%E6%9D%A1%E4%BB%B6%E5%88%86%E6%94%AF/"},{"name":"字符串","slug":"字符串","permalink":"https://zilinshisi.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"},{"name":"String","slug":"String","permalink":"https://zilinshisi.github.io/tags/String/"},{"name":"selenium","slug":"selenium","permalink":"https://zilinshisi.github.io/tags/selenium/"},{"name":"mysql","slug":"mysql","permalink":"https://zilinshisi.github.io/tags/mysql/"},{"name":"安装教程","slug":"安装教程","permalink":"https://zilinshisi.github.io/tags/%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"},{"name":"排序","slug":"排序","permalink":"https://zilinshisi.github.io/tags/%E6%8E%92%E5%BA%8F/"},{"name":"centos","slug":"centos","permalink":"https://zilinshisi.github.io/tags/centos/"},{"name":"algorithm","slug":"algorithm","permalink":"https://zilinshisi.github.io/tags/algorithm/"},{"name":"python算法练习","slug":"python算法练习","permalink":"https://zilinshisi.github.io/tags/python%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/"},{"name":"hexo博客","slug":"hexo博客","permalink":"https://zilinshisi.github.io/tags/hexo%E5%8D%9A%E5%AE%A2/"},{"name":"Latex","slug":"Latex","permalink":"https://zilinshisi.github.io/tags/Latex/"},{"name":"strcmp","slug":"strcmp","permalink":"https://zilinshisi.github.io/tags/strcmp/"}]}